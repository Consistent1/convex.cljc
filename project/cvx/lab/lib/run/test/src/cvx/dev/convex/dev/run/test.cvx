(sreq/dep {T     "project/cvx/lab/lib/run/test/src/cvx/main/convex/run/test.cvx"
           xform "project/cvx/lab/lib/xform/src/cvx/main/convex/xform.cvx"})



(sreq/hook.error (fn [ex]
                   (sreq/out (dissoc ex
                                     :trace))))

(eval (first xform))
(eval `(def T
            (deploy (quote ~(cons 'do
                                  (next (next T)))))))


(import convex.xform :as xform)


(sreq/screen.clear)




(defn guard

  [tag+]

  (> (count (intersection tag+
                          #{:important}))
     0))


(T/filter.set :important?)


(T/state.push)

(T/trx '(do
          (def baz 24)
          (< 2 5)))


(def x
     42)


    (sreq/out [:filter T/*filter*])
(T/trx '(T/is (< x 4)))

(let [a 4
      b 3]
  (T/trx `(or (< ~a ~b)
                 (- ~a ~b))
            {:description "I know, it fails."}))

(def foo 42)

(T/state.pop `(def bar ~foo))

    (sreq/out [:filter T/*filter*])

(T/fail-code #{:ASSERT}
             '(T/is (= 1
                       2))
             {:description "Must fail fast."})

;(sreq/hook.end '[(T/exit)])


(sreq/out \newline)


(T/print-failed)


#_(sreq/do '[(sreq/out \newline):
           (sreq/log)
           (sreq/out [:log help/*trx.last.result*])])

                                 (sreq/log)
                                 (sreq/out [:log help/*trx.last.result*])
