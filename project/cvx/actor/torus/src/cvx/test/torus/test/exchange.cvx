;;
;;
;; Testing `torus.exchange`.
;;
;;


;;;;;;;;;; Setup


($.file/read "project/cvx/actor/torus/src/cvx/main/convex/torus.cvx")


(def torus
     (deploy (cons 'do
                   (next (next $/*result*)))))


(def T
     $.test)


(import convex.asset    :as asset)
(import convex.fungible :as fungible)
(import torus.exchange  :as torus)


($.stream/out! (str $.term/clear.screen
                    "Testing `torus.exchange`"))


;; Easier to buy/sell as a user account, no need to implement `receive-coin`.
;;
(set-key $.account/fake-key)


;;;;;;;;;; Deploying currencies - 1e6 each with 2 decimal places


(def GBP.token
     (deploy (fungible/build-token {:supply 100000000})))


(def USD.token
     (deploy (fungible/build-token {:supply 100000000})))


(def USD.market
     (call torus
           (create-market USD.token)))


;; Only market for USD at the moment.


;;;;;;;;;; Test suites


(defn suite.api

  ^{:doc {:description ""}}

  []

  (T/group '((T/path.conj 'api)

             (T/trx '(address? (def GBP.market
                                    (call torus
                                          (create-market GBP.token))))
                    {:description "Create market for GBP."})

             (T/trx '(= GBP.market
                        (torus/get-market GBP.token))
                    {:description "Retrieve market for GBP."})

             (T/trx '(= USD.market
                        (torus/get-market USD.token))
                    {:description "Retrieve market for USD."})

             (T/trx '(nil? (torus/price GBP.token))
                    {:description "No price for GBP yet, market exists but no liquidity."})

             (T/trx '(nil? (torus/price USD.token))
                    {:description "No price for USD yet, market exists but no liquidity."})

              ;; Liquidity

             (T/trx '(<= (- 1.0
                            0.00001)
                         (/ (sqrt (* 5000000.0
                                     1000000000000.0))
                            (torus/add-liquidity GBP.token
                                                 5000000
                                                 1000000000000))
                         (+ 1.0
                            0.00001))
                    {:description "Initial deposit of 50K GBP token liquidity and checking result."})

             (T/trx '(<= (- 1.0
                            0.00001)
                         (/ (sqrt (* 10000000.0
                                     1000000000000.0))
                            (torus/add-liquidity USD.token
                                                 10000000
                                                 1000000000000))
                         (+ 1.0
                            0.00001))
                    {:description "Initial deposit of 100K USD token liquidity and checking result."})

             ;; Prices

             (T/trx '(= 200000.0
                        (torus/price GBP.token))
                    {:description "50 GBP token for 1e12 CVX Gold = 2e5 CVX / Penny sterling."})

             (T/trx '(= 100000.0
                        (torus/price USD.token))
                    {:description "100K USD token for 1e12 CVX Gold = 1e5 CVX / US Cent."})

             (T/trx '(= 1.0
                        (torus/price GBP.token
                                     GBP.token))
                    {:description "Rate GBP / GBP."})

             (T/trx '(= 2.0
                        (torus/price GBP.token
                                     USD.token))
                    {:description "Rate GBP / USD."})

             (T/trx '(= 0.5
                        (torus/price USD.token
                                     GBP.token))
                    {:description "Rate USD / GBP."})

             ;; Marginal buy trades for 1 GBP / 1 USD

             (T/trx '(= 101
                        (torus/buy GBP.token
                                   100
                                   GBP.token)))

             (T/trx '(= 101
                        (torus/buy-quote GBP.token
                                         100
                                         GBP.token)))

             (T/trx '(= 51
                        (torus/buy USD.token
                                   100
                                   GBP.token)))

             (T/trx '(= 51
                        (torus/buy-quote USD.token
                                         100
                                         GBP.token)))

             (T/trx '(= 201
                        (torus/buy GBP.token
                                   100
                                   USD.token)))

             (T/trx '(= 201
                        (torus/buy-quote GBP.token
                                         100
                                         USD.token)))

             ;; Marginal sell trades for 1 GBD / 1 USD

             (T/trx '(= 99
                        (torus/sell GBP.token
                                    100
                                    GBP.token)))

             (T/trx '(= 99
                        (torus/sell-quote GBP.token
                                          100
                                          GBP.token)))

             (T/trx '(= 49
                        (torus/sell USD.token
                                    100
                                    GBP.token)))

             (T/trx '(= 49
                        (torus/sell-quote USD.token
                                          100
                                          GBP.token)))

             (T/trx '(= 199
                        (torus/sell GBP.token
                                    100
                                    USD.token)))

             (T/trx '(= 199
                        (torus/sell-quote GBP.token
                                          100
                                          USD.token)))

             ;; Failures
             ;; TODO. Review, errors in original Java tests were actually failing only because of arity exceptions.

             (T/fail.code #{:LIQUIDITY}
                          '(torus/buy USD.token
                                      1000000000000000
                                      USD.token)
                          {:description "Trade too big, not enough liquidity."}))))



(defn suite.deployed-currencies

  ^{:doc {:description ""}}

  []

  (T/group '((T/path.conj 'deployed-currencies)

             (import currency.GBP :as GBP.default)
             (import currency.USD :as USD.default)

             ;; TODO. Missing `double?` in core. See https://github.com/Convex-Dev/convex/issues/92
             ;;
             (T/trx '(number? (torus/price GBP.default
                                           USD.default))
                    {:description "Price of USD per GBP token."}))))



(defn suite.missing-market

  ^{:doc {:description ""}}

  []

  (T/group '((T/path.conj 'missing-market)

             (T/trx '(nil? (torus/get-market GBP.token))
                    {:description "There is no market for GBP yet."})

             (T/trx '(nil? (torus/price #4242424242))
                    {:description "No price for a market that does not exist."})

             (T/trx '(nil? (torus/price GBP.token))
                    {:description "No price for a market that does not exist, even if token exists."}))))


;;;


(defn suite.main

  ^{:doc {:description ""}}

  []

  (T/group '((T/path.conj 'torus.exchange)
             (suite.api)
             (suite.deployed-currencies)
             (suite.missing-market)
             )))


;;;;;;;;;;


(suite.main)
(T/print "torus.exchange")
