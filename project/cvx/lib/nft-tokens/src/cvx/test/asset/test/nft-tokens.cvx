;;
;;
;; Testing the `asset.nft-tokens`.
;;
;;


;;;;;;;;;; Setup


($.stream/out! (str $.term/clear.screen
                    "Testing `asset.nft-tokens` library"))


;; Deploying test version of `asset.simple-nft` instead of importing stable version.
;;
($.file/read "project/cvx/lib/nft-tokens/src/cvx/main/asset/nft-tokens.cvx")


(eval `(def nft
            (deploy (quote ~(cons 'do
                                  (next (next $/*result*)))))))


($.file/exec "project/cvx/lib/asset/src/cvx/test/convex/test/asset/quantity/set-long.cvx")



;; Importing stable versions
;;
(import convex.asset :as asset)

(def T
     $.test)


;; Default account is an actor, key is set to transform it into a user account.
;;
(set-key $.account/fake-key)


;; Test suites


(defn suite.mono

  ^{:doc {:description ""}}

  []

  (T/group '[(T/path.conj 'mono)

             (def uri
                  "https://www.mysite.com")

             (def data
                  {:name "Token-1"
                   :uri  uri})

             (T/trx '(long? (def token
                                 (call nft
                                       (create-token data
                                                     nil))))
                    {:description "NFT created."})

             (T/trx '(= {:creator *address*
                         :data    data
                         :owner   *address*}
                        (get nft/token-records
                             token))
                    {:description "Accurate NFT record."})

             (T/trx '(asset/owns? *address*
                                  [nft
                                   #{token}])
                    {:description "Creater owns NFT."})

             (T/trx '(= #{token}
                        (asset/balance nft
                                       *address*))
                    {:description "NFT is in creator balance."})

             (T/trx '(= *address*
                        (call nft
                              (get-token-creator token)))
                    {:description "Creator is retrieved."})

             (T/trx '(= *address*
                        (call nft
                              (get-token-owner token)))
                    {:description "Initially, creator is owner."})

             (T/trx '(= data
                        (call nft
                              (get-token-data token)))
                    {:description "Token data is retrieved."})

             (T/trx '(nil? (call nft
                                 (get-token-class token)))
                    {:description "No class associated with NFT."})

             (T/trx '(= uri
                        (call nft
                              (get-uri token)))
                    {:description "URI of NFT is retrieved."})

             (T/trx '(call nft
                           (check-trusted? *address*
                                           :destroy
                                           token))
                    {:description "Can destroy NFT."})

             (T/trx '(call nft
                           (check-trusted? *address*
                                           :transfer
                                           token))
                    {:description "Can transfer NFT."})

             (T/trx '(call nft
                           (check-trusted? *address*
                                           :update
                                           token))
                    {:description "Can update NFT."})

             (T/trx '(call nft
                           (check-trusted? *address*
                                           [:update :name]
                                           token))
                    {:description "Can update NFT name."})

             (def data-new
                  (assoc data
                         :foo
                         :bar))

             (T/trx '(= data-new
                        (call nft
                              (merge-token-data token
                                                {:foo :bar})))
                    {:description "Can merge data to NFT."})

             (T/trx '(= data-new
                        (call nft
                              (get-token-data token)))
                    {:description "Data merged permanently."})

             (T/trx '(= 42
                        (call nft
                              (set-token-data token
                                              42)))
                    {:description "Can replace NFT data."})

             (T/trx '(= 42
                        (call nft
                              (get-token-data token)))
                    {:description "Data replaced permanently."})

             (T/trx '(nil? (call nft
                                 (check-transfer *address*
                                                 nil
                                                 token)))
                    {:description "No transfer issued."})

             (T/trx '(= "No right to transfer token -1"
                        (call nft
                              (check-transfer *address*
                                              nil
                                              -1)))
                    {:description "Cannot check transfer on inexistent NFT."})

             (T/trx '(call nft
                           (destroy-token token))
                    {:description "NFT destroyed."})

             (T/fail.code #{:ASSERT}
                          '(call nft
                                 (destroy-token -1))
                          {:description "Cannot destroy inexistent NFT."})

             (T/trx '(not (asset/owns? *address*
                                       [nft
                                        token]))
                    {:description "Cannot own destroyed NFT."})

             (T/trx '(= #{}
                         (asset/balance nft
                                        *address*))
                    {:description "Balance is empty after destroying NFT."})

             (T/trx '(nil? (get nft/token-records
                                token))
                    {:description "NFT record destroyed."})]))



(defn suite.transfer

  ^{:doc {:description ""}}

  []

  (T/group '[(T/path.conj 'duo)

             (def receiver
                  ($.account/zombie))

             (T/trx '(zero? (def token
                                 (call nft
                                       (create-token {:name "Token-1"}
                                                     nil))))
                    {:description "First token created."})

             (T/trx '(= [nft
                         #{token}]
                        (asset/transfer receiver
                                        [nft
                                         token]))
                    {:description "Token tranferred."})

             (T/trx '(not (asset/owns? *address*
                                       [nft
                                        token]))
                    {:description "Lost ownership after transfer."})

             (T/trx '(asset/owns? receiver
                                  [nft
                                   token])
                    {:description "Receiver is now the owner."})

             (T/trx '(not (subset? #{token}
                                   (asset/balance nft
                                                  *address*)))
                    {:description "Balance reflects lost ownership."})

             (T/trx '(subset? #{token}
                              (asset/balance nft
                                             receiver))
                    {:description "Balance of receiver reflects ownership."})

             (T/trx '(= *address*
                        (call nft
                              (get-token-creator token)))
                    {:description "Creator did not change during transfer."})

             (T/trx '(= receiver
                        (call nft
                              (get-token-owner token)))
                    {:description "Token owner adjusted."})

             (T/trx '(not (call nft
                                (check-trusted? *address*
                                                :destroy
                                                token)))
                    {:description "Lost ability to destroy."})

             (T/trx '(not (call nft
                                (check-trusted? *address*
                                                :transfer
                                                token)))
                    {:description "Lost ability to transfer."})

             (T/trx '(not (call nft
                                (check-trusted? *address*
                                                :update
                                                token)))
                    {:description "Lost ability to update."})

             (T/trx '(not (call nft
                                (check-trusted? *address*
                                                [:update :name]
                                                token)))
                    {:description "Lost ability to update name."})

             (T/trx '(call nft
                           (check-trusted? receiver
                                           :destroy
                                           token))
                    {:description "Receiver gained ability to destroy."})

             (T/trx '(call nft
                           (check-trusted? receiver
                                           :transfer
                                           token))
                    {:description "Receiver gained ability to transfer."})

             (T/trx '(call nft
                           (check-trusted? receiver
                                           :update
                                           token))
                    {:description "Receiver gained ability to update."})

             (T/trx '(call nft
                           (check-trusted? receiver
                                           [:update :name]
                                           token))
                    {:description "Receiver gained ability to update name."})]))
;;;


(defn suite.main

  ^{:doc {:description "Main suite gathering other suites."}}

  []

  (T/group '[(T/path.conj 'asset.nft-tokens)
             (suite.mono)
             (suite.quantity nft)  ;; From `asset/quantity/set-long` test file.
             (suite.transfer)]))


;;;


(T/report.clear)
(suite.main)
(T/print "asset.nft-tokens")
