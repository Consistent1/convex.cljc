(sreq/dep {asset.test "project/cvx/lib/asset/src/cvx/test/convex/test/asset.cvx"
           fungible   "project/cvx/lib/fungible/src/cvx/main/convex/fungible.cvx"})


(def asset.test
     (deploy (cons 'do
                    asset.test)))


#_(eval `(def fungible
            (deploy (quote ~(cons 'do
                                  (next (next fungible)))))))

(import convex.fungible :as fungible)
(import convex.asset    :as asset)
(import convex.run.test :as T)


(sreq/hook.error (fn [err] (sreq/out (dissoc err :trace))))

(sreq/hook.end '[(T/print-failed)])
(sreq/screen.clear)
(sreq/out "Testing `convex.fungible` library\n")


;; Default account is an actor, key is set to transform it into a user account.
;;
(set-key 0x0000000000000000000000000000000000000000000000000000000000000000)


(def supply
     1000000)



(def villain
     (deploy `(do
                (set-controller ~*address*)
                (set-key 0x0000000000000000000000000000000000000000000000000000000000000000))))



(defn suite.fungible

  ^{:doc {:description ""}}

  [token user]

  (T/group `[(T/path.conj 'suite.fungible)

             (T/trx '(= supply
                        (asset/balance ~token
                                       ~user))
                    {:description "Initially, user owns total supply."})
                  
             (T/trx '(= 0
                        (asset/balance ~token
                                       (deploy nil)))
                    {:description "Newly created account has no token."})
              
             (T/trx '(do
                      (asset/transfer ~user
                                      [~token
                                       (asset/balance ~token
                                                      ~user)])
                      (= supply
                         (asset/balance ~token
                                        ~user)))
                    {:description "Self-transfer does not affect balance."})

             (T/trx '(do
                       (asset/transfer ~user
                                       [~token
                                        nil])
                       (= supply
                          (asset/balance ~token
                                         ~user)))
                    {:description "Self-transfer of nothing does not affect balance."})

             (asset.test/suite.main ~token
                                    ~user
                                    (let [user-2 (deploy '(do
                                                            (set-controller *origin*)
                                                            (set-key 0x0000000000000000000000000000000000000000000000000000000000000000)))]
                                      (asset/transfer user-2
                                                      [~token
                                                       (long (/ supply
                                                                3))])
                                      user-2))]))



(defn suite.asset

  ^{:doc {:description ""}}

  []

  (T/group `[(T/path.conj 'suite.asset)

             (T/trx '(address? (def token
                                    (deploy (fungible/build-token {:supply ~supply}))))
                    {:description "Token deployed"})

             (suite.fungible token
                             *address*)

             ;; Transfers

             (T/trx '(= 500
                        (asset/offer ~villain
                                     [token
                                      500]))
                    {:description "Offer villain some tokens."})

             (T/trx '(= 500
                        (asset/get-offer token
                                         *address*
                                         ~villain))
                    {:description "First offer has been issued."})

             (T/trx '(= 1000
                        (asset/offer ~villain
                                     [token
                                      1000]))
                    {:description "Updating offer."})

             (T/trx '(= 1000
                        (asset/get-offer token
                                         *address*
                                         ~villain))
                    {:description "Offer has been updated."})

             (T/trx '(= 250
                        (eval-as ~villain
                                 `(~asset/accept ~*address*
                                                 [~token
                                                  250])))
                    {:description "Partly accepting an offer, returns current balance."})

             (T/trx '(= 750
                        (asset/get-offer token
                                         *address*
                                         ~villain))
                    {:description "Remaining offer is still valid."})

             (T/trx '(= 1000
                        (eval-as ~villain
                                 `(~asset/accept ~*address*
                                                 [~token
                                                  750])))
                    {:description "Accepting remaining offer, returns current balance."})

             (T/trx '(= 2000
                        (asset/transfer ~villain
                                        [token
                                         1000]))
                    {:description "Transfer some tokens to villain (arity 2), returns current balance."})

             (T/trx '(= {token 3000}
                        (asset/transfer ~villain
                                        {token 1000}))
                    {:description "Transfer some tokens to villain (arity 3), returns current balance."})

             (T/trx '(= (- ~supply
                           3000)
                        (asset/balance token
                                       *address*))
                    {:description "Villain received tokens."})

             (T/trx '(= 3000
                        (asset/balance token
                                       ~villain))
                    {:description "Balance updated after transferring to villain."})


             ;; Ownership

             (def balance-villain
                  (asset/balance token
                                 ~villain))

             (T/trx '(asset/owns? ~villain
                                  [token
                                   (dec balance-villain)])
                    {:description "Villain owns at least less than its balance."})

             (T/trx '(asset/owns? ~villain
                                  [token
                                   balance-villain])
                    {:description "Villain owns its balance."})

             (T/trx '(not (asset/owns? ~villain
                                       [token
                                        (inc balance-villain)]))
                    {:description "Villain cannot own more than its balance."})


             ;; Token arithmetics

             (T/trx '(= 0
                        (asset/quantity-zero token))
                    {:description "Empty balance is 0."})

             (T/trx '(= 110
                        (asset/quantity-add token
                                            100
                                            10))
                    {:description "Adding tokens."})

             (T/trx '(= 100
                        (asset/quantity-add token
                                            100
                                            nil))
                    {:description "Adding nil."})

             (T/trx '(= 100
                        (asset/quantity-add token
                                            nil
                                            100))
                    {:description "Adding to nil."})

             (T/trx '(= 90
                        (asset/quantity-sub token
                                            100
                                            10))
                    {:description "Subtracting tokens."})

             (T/trx '(= 100
                        (asset/quantity-sub token
                                            100
                                            nil))
                    {:description "Subtracting nil."})

             (T/trx '(zero? (asset/quantity-sub token
                                                nil
                                                100))
                    {:description "Subtracting from nil."})

             (T/trx '(= 0
                        (asset/quantity-sub token
                                            10
                                            1000))
                    {:description "Subtracting does not go below 0."})


             ;; Token comparisons

             (T/trx '(asset/quantity-contains? [token
                                                110]
                                               [token
                                                100]))

             (T/trx '(asset/quantity-contains? [token
                                                110]
                                               nil))

             (T/trx '(asset/quantity-contains? nil
                                               nil))

             (T/trx '(asset/quantity-contains? token
                                               110
                                               100))

             (T/trx '(asset/quantity-contains? token
                                               110
                                               nil))

             (T/trx '(asset/quantity-contains? token
                                               nil
                                               nil))

             (T/trx '(not (asset/quantity-contains? [token
                                                     100]
                                                    [token
                                                     110])))

             (T/trx '(not (asset/quantity-contains? nil
                                                    [token
                                                     110])))

             (T/trx '(not (asset/quantity-contains? token
                                                    100
                                                    110)))

             (T/trx '(not (asset/quantity-contains? token
                                                    nil
                                                    110)))]))



(defn suite.build-token

  ^{:doc {:description ""}}

  [meta]

  (T/group '[(def token
                  (deploy (fungible/build-token {})))

             (T/trx '(boolean token)
                    {:description "Token deployed"})]))



(suite.asset)

;(suite.build-token {})
