


(import convex.run.sreq :as sreq)
(import convex.run.test :as T)



(defn suite.balance

  ^{:doc {:description ""}}

  [value-empty balance metadata]

  (T/group `[(T/trx '(not (nil? ~balance))
                    ~(assoc metadata
                            :description
                            "Balance is not nil."))

             (T/trx '(not (= ~value-empty
                             ~balance))
                    ~(assoc metadata
                            :description
                            "Balance is not empty."))]))



(defn suite.main

  ^{:doc {:description ""}}

  [token user-1 user-2 meta]

  (let [meta-user-1 (assoc meta
                          :user
                          "1")
        meta-user-2 (assoc meta
                          :user
                          "2")]
    (T/group `[(def tester
                    (deploy '(do
                               (set-controller ~*address*)
                               (set-key 0x0000000000000000000000000000000000000000000000000000000000000000)
                               (def actor
                                    (deploy '(set-controller *address*))))))

               (T/trx '(boolean (eval-as tester
                                        'actor))
                      {:description "Controlled actor deployed"})

               (def value-empty
                    (asset/quantity-zero ~token))

               (T/trx '(= value-empty
                          (asset/balance ~token
                                         tester))
                      {:description "Initially, tester balance is empty."})

               (def balance-1
                    (asset/balance ~token
                                   ~user-1))

               (~suite.balance value-empty
                               balance-1
                               ~meta-user-1)


               (def balance-2
                    (asset/balance ~token
                                   ~user-2))

               (~suite.balance value-empty
                               balance-2
                               ~meta-user-2)

               (def supply
                    (asset/quantity-add ~token
                                        balance-1
                                        balance-2))

               (~suite.balance value-empty
                               supply
                               {:user "supply"})

               (~suite.user ~token
                            ~user-1
                            balance-1
                            ~meta-user-1)

               (~suite.user ~token
                            ~user-2
                            balance-2
                            ~meta-user-2)

               (eval-as ~user-1
                        (list asset/transfer
                              tester
                              [~token
                               balance-1]))
                                         
               (T/trx '(= value-empty
                          (asset/balance ~token
                                         ~user-1))
                      {:description "Balance of user 1 has been emptied."})

               (eval-as ~user-2
                        (list asset/transfer
                              tester
                              [~token
                               balance-2]))
                                   
               (T/trx '(= supply
                          (asset/balance ~token
                                         tester))
                      {:description "Tester has whole supply."})])))



(defn suite.user

  ^{:doc {:description ""}}

  [token user known-balance metadata]

  (T/group `[(T/trx '(= ~known-balance
                        (asset/balance ~token
                                       ~user))
                    ~(assoc metadata
                            :description
                            "Balance is as expected."))

             (T/trx '(= ~known-balance
                        (asset/quantity-add ~token
                                            ~known-balance
                                            nil)
                        (asset/quantity-add ~token
                                            nil
                                            ~known-balance))
                    ~(assoc metadata
                            :description
                            "Adding nothing to a quantity does not change the quantity."))

             (T/trx '(= (asset/quantity-zero ~token)
                        (asset/quantity-sub ~token
                                            ~known-balance
                                            ~known-balance))
                    ~(assoc metadata
                            :description
                            "Subtracting a quantity from itself equals the empty value."))

             (T/trx '(asset/owns? ~user
                                  [~token
                                   ~known-balance])
                    ~(assoc metadata
                            :description
                            "User owns what is reported by `balance`."))

             (T/trx '(asset/owns? ~user
                                  [~token
                                   nil])
                    ~(assoc metadata
                            :description
                            "User owns at least \"nothing\"."))]))
