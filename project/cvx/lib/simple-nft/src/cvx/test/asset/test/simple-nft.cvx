;;
;;
;; Testing the `asset.simple-nft` library.
;;
;;


(sreq/dep {asset.test "project/cvx/lib/asset/src/cvx/test/convex/test/asset.cvx"
           nft	      "project/cvx/lib/simple-nft/src/cvx/main/asset/simple-nft.cvx"})


;; Deploying test version of `asset.simple-nft` instead of importing stable version.
;;
(eval `(def nft
            (deploy (quote ~(cons 'do
                                  (next (next nft)))))))


;; Requiring test suites for `convex.asset` since this library implement that interface.
;;
(def asset.test
     (deploy (cons 'do
                    asset.test)))


(asset.test/setup)


;; Importing stable versions
;;
(import convex.run.test :as T)


;; Setup. Print test results at the end
;;
(sreq/hook.end '[;(suite.main)
				 (T/print-failed)])
(sreq/screen.clear)
(sreq/out "Testing `asset.simple-nft` library\n")


;; Default account is an actor, key is set to transform it into a user account.
;;
(set-key help/fake-key)


;; Test suites


(defn suite.asset

  ^{:doc {:decription ""}}

  []

  (T/group '[(T/path.conj 'suite.asset)

		     (T/trx '(vector? (def total
							       (loop [acc []]
							         (if (= (count acc)
							     		   4)
							     	  acc
							     	  (recur (conj acc
							     			       (call nft
							     					     (create-nft))))))))
				    {:description "4 NFTs created."})

			 (T/trx '(= (set total)
					    (asset/balance nft
									   *address*))
					{:description "Creator balance contain all NFTs."})

			 (T/trx '(asset/owns? *address*
								  [nft
								   (set total)])
				    {:description "Initially, creator owns all NFTs."})

			 (T/trx '(address? (def user-1
								    (help/zombie)))
			        {:description "User 1 deployed."})

			 (T/trx '(address? (def user-2
								    (help/zombie)))
			        {:description "User 2 deployed."})

			 (def balance-creator
				  #{(total 0)})

			 (def balance-user-1
				  (set (next total)))

			 (T/trx '(= balance-user-1
						(asset/transfer user-1
									    [nft
										 balance-user-1]))
					{:description "Transfer almost all NFTs to user 1."})

			 (T/trx '(= balance-user-1
						(asset/balance nft
									   user-1))
				    {:description "Balance of user 1 updated."})

			 (T/trx '(= balance-creator
					    (asset/balance nft
									   *address*))
				    {:description "Balance of created updated."})

			 (T/trx '(not (asset/owns? *address*
									   [nft
										balance-user-1]))
					{:description "After transfer, creator do not own user 1 NFTs."})

			 (T/trx '(asset/owns? user-1
								  [nft
								   balance-user-1])
					{:description "After transfer, user 1 owns expected NFTs."})

			 (T/trx '(asset/owns? *address*
								  [nft
								   balance-creator])
					{:description "Creator still owns 1 NFT."})

			 (T/trx '(= #{}
					    (asset/balance nft
									   user-2))
			        {:description "User 2 balance is still empty."})

			 (def balance-user-2
			      balance-creator)

			 (T/trx '(= balance-user-2
						(asset/transfer user-2
								        [nft
										 balance-user-2]))
			        {:description "Transfer remaining NFT to user 2."})

			 (T/trx '(= balance-user-2
						(asset/balance nft
									   user-2))
					{:description "Balance of user 2 updated."})

			 (T/trx '(= #{}
						(asset/balance nft
									   *address*))
					{:description "Balance of creator is empty."})

			 (T/trx '(asset/owns? user-2
								  [nft
								   balance-user-2])
					{:description "User 2 owns remaining NFT."})


			 (T/trx '(not (asset/owns? *address*
									   [nft
									    balance-user-2]))
					{:description "Creator lost ownership of its last NFT."})

			 (T/trx '(= balance-user-1
						(asset/balance nft
									   user-1))
				    {:description "Balance of user 1 unchanged."})

			 (asset.test/suite.main nft
									user-1
									user-2)]))


;;


(suite.asset)
