;;
;;
;; Help library for the Convex Lisp Runner offering a series of values dynamically set by the runner (eg. `env/*error*` when a CVM error occurs) and the `about`
;; function for navigating documentation metadata.
;;
;;


(call *registry*
      (cns-update 'convex.run
                  *address*))


(call *registry*
      (register {:doc  {:description ["Help library for the Convex Lisp Runner."
                                      "Provides a series of special values named `*xxx*` which hold commonly useful information, such as juice consumption."
                                      "Also provides the `about` function for printing a description of any account or any symbol defined in any account."
                                      "For more information, evalute `(env/about env 'about)`."]}
                 :name "Convex Lisp Runner Help and Miscelleneous Utilities"}))


;;;;;;;;;;


(def $.stream

  ^{:doc      {:description ""}
    :private? true}

  (call *registry*
        (cns-resolve 'convex.run.stream)))



(def self

  ^{:doc {:description ""}}

  *address*)


;;;;;;;;;; Static values set by the runner


(def line

  ^{:doc {:description ""}}


  nil)



(def version

  ^{:doc {:description ""}}

  nil)


;;;;;;;;;; DYNAMIC VALUES


(def *result*

  ^{:doc {:description "Result of the previous transaction."}}

  nil)


;;;;;;;;;; Getting help


(defmacro help

  ^{:doc {:description ""}}


  ([]

   '($.help/main))


  ([addr-or-sym]

   (if (and (list? addr-or-sym)
            (= (count addr-or-sym)
               3)
            (= (first addr-or-sym)
               'lookup))
     `($.help/symbol ~(nth addr-or-sym
                           1)
                     (quote ~(nth addr-or-sym
                                  2)))
     `(let [x ~addr-or-sym]
        (if (address? x)
          ($.help/address x)
          ($.help/symbol (quote ~addr-or-sym)))))))


;;;;;;;;;; Miscellaneous


(defn monitor

  ^{:doc {:description ""}}

  [trx]

  [:cvm.sreq :monitor trx])



(defn benchmark

  ^{:doc {:description ""}}

  [trx]

  [:cvm.sreq :perf.benchmark trx])
