(sreq/screen.clear)




(def test
     (deploy
      '(do

         (call *registry*
               (cns-update 'convex.run.test
                           *address*))
         
         
         
         (call *registry*
               (register {:doc  "Unit testing library for the Convex Lisp Runner."
                          :name "Convex Liser Runner Unit Testing"}))
         
         
         
         (def help
         
           ^{:doc {:description "Alias to the Help library."}}
         
           (call *registry*
                 (cns-resolve 'convex.run.sreq)))
         
         
         
         (def sreq
         
           ^{:doc {:description "Alias to the SReq library."}}
         
           (call *registry*
                 (cns-resolve 'convex.run.sreq)))



         (def self

           ^{:doc {}}

           *address*)



         (def state
 
           ^{:doc {}}
 
           {:result+ []})



         (defn conj-result
         
           ^{:doc {}}
         
           [result]
         
           (def state
                (assoc state
                       :result+
                       (conj (get state
                                  :result+)
                             result))))



         (export conj-result)


         (defn set-filter

           ^{:doc {}}

           [filter]

           (if (= *address*
                  self)
             (def state
                  (assoc state
                         :filter
                         filter))
             (call self
                   (set-filter filter))))


         (export set-filter)
                 


         (def k-pass?
         
           ^{:doc {}}
         
           :convex.run.test.pass?)
         
         
         
         (defn pass?
         
           ^{:doc {}}
         
           [result]
         
           (if (boolean result)
             (if (map? result)
               (boolean (result k-pass?))
               true)
             false))
         
         

         (defn trx
         
           ^{:doc {}}


           ([trx]

            (if (syntax? trx)
              (self/trx (meta trx)
                        (unsyntax trx))
              (self/trx nil
                        trx)))

         
           ([metadata trx]
         
            (let [filter (self/state :filter)]
              (when (or (not filter)
                        (filter metadata))
                (let [base-report {:trx 42}]
                  (sreq/try `[(query ~trx)
                              (let [result help/*trx.last.result*]
                                (call ~self
                                      (conj-result (assoc ~base-report
                                                          :result result
                                                          :pass?  (boolean result)))))]
                            `[(call ~self
                                    (conj-result (assoc ~base-report
                                                       :exception help/*error*
                                                       :pass?     false)))]))))))
         
                                 

         (defn function

           ^{:doc {}}

            [f-symbol]

            (trx (lookup-meta f-symbol)
                 (list f-symbol)))


         
         (defmacro assert
         
           ^{:doc {}}
         
           [form]
         
           `(let [result ~form]
              (if (~self/pass? result)
                result
                (if (map? result)
                  (assoc result
                         :convex.run.test.form
                         (quote ~form))
                  {~k-pass?              false
                   :result               result
                   :convex.run.test.form (quote ~form)}))))


       ))) ;; END OF TEST ACTOR



(defn test-1

  ^{:important? false}

  []

  (test/assert (< 5 5)))





(test/set-filter (fn [metadata]
                   (get metadata
                        :important?)))




#_
(test/trx (syntax '(test-1)
                  {:important? true}))

(test/function 'test-1)


(sreq/out [:result+ (get test/state
                         :result+)])




#_
(sreq/do '[(sreq/out \newline):
           (sreq/log)
           (sreq/out help/*trx.last.result*)])

