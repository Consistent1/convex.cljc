(sreq/screen.clear)




(def test
     (deploy
      '(do

         (call *registry*
               (cns-update 'convex.run.test
                           *address*))
         
         
         
         (call *registry*
               (register {:doc  "Unit testing library for the Convex Lisp Runner."
                          :name "Convex Liser Runner Unit Testing"}))
         
         
         
         (def help
         
           ^{:doc {:description "Alias to the Help library."}}
         
           (call *registry*
                 (cns-resolve 'convex.run.sreq)))
         
         
         
         (def sreq
         
           ^{:doc {:description "Alias to the SReq library."}}
         
           (call *registry*
                 (cns-resolve 'convex.run.sreq)))



         (def self

           ^{:doc {}}

           *address*)



         (def state
 
           ^{:doc {}}
 
           {:pass?   true
            :report+ []})



         (defn conj-report
         
           ^{:doc {}}
         
           [report]
         
           (if (= *address*
                  self)
             (def state
                  (let [state-2 (assoc state
                                       :report+
                                       (conj (get state
                                                  :report+)
                                             report))]
                   (if (:pass? report)
                     state-2
                     (assoc state-2
                            :pass?
                            false))))
             (call self
                   (conj-report report))))



         (export conj-report)



         (defn trx
         
           ^{:doc {}}


           ([trx]

            (self/trx trx
                      nil))

         
           ([trx metadata]
         
            (let [base-report {:metadata metadata
                               :trx      (list 'quote
                                               trx)}]
              (sreq/try `[(query ~trx)
                          (let [result help/*trx.last.result*]
                            (~self/conj-report (assoc ~base-report
                                                      :result result
                                                      :pass?  (= result
                                                                 true))))]
                        `[(~self/conj-report (assoc ~base-report
                                                    :exception help/*error*
                                                    :pass?     false))]))))
         
                                 

         (defn function

           ^{:doc {}}

            [f-symbol]

            (trx (list f-symbol)
                 (lookup-meta f-symbol)))





       ))) ;; END OF TEST ACTOR



(defn test-1

  ^{:important? true
    :test?      true}

  []

  (or (< 4
         5)
      :foo))





(defn guard

  [tag+]

  (> (count (intersection tag+
                          #{:foo
                            :important}))
     0))
                    


(sreq/do '[(when (guard #{:important})
             (sreq/do '[(def foo 42)
                        (when (guard #{:foo})
                          (test/trx '(or (fail :bar :baz)
                                         :foo)))]))])



(sreq/out [:tests test/state])




#_
(sreq/do '[(sreq/out \newline):
           (sreq/log)
           (sreq/out help/*trx.last.result*)])

