

(call *registry*
      (cns-update 'convex.run.repl
                  *address*))


(call *registry*
      (register {:doc  {:description ""}
                 :name ""}))




(def $

  ^{:doc {:description ""}}

  (call *registry*
        (cns-resolve 'convex.run)))



(def $.trx

  ^{:doc {:description ""}}

  (call *registry*
        (cns-resolve 'convex.run.trx)))



(def self

  *address*)


;;;;;;;;;; DYNAMIC VALUES


(def *active?*

  ^{:doc {:description ""}}

  false)


;;;;;;;;;; BASIC REPL


(defn start

  ^{:doc {:description ""}}

  ([]

   (start $/*result*))


  ([result]
 
   (if (= *address*
          self)
     (do
       (def *active?*
            true)
       ($.trx/precat `(($.catch/safe '($.trx/precat '(($.stream/out "> ")
                                                      ($.stream/flush)
                                                      ($.stream/line+)))

                                     '(list $/*result*))
                       (let [form+       $/*result*
                             n-form      (count form+)
                             result-real (quote ~result)]
                         (if (>= n-form
                                 1)
                           ($.catch/safe `($.trx/precat (quote ~(concat `((quote ~result-real))
                                                                        form+
                                                                        '((def $.repl.result
                                                                               $/*result*)))))

                                         '(def $.repl.result
                                               $/*result*)

                                         '(when $.repl/*active?*
                                            ($.trx/precat '(($.stream/out $/line)
                                                            ($.stream/out! (if (str? $.repl.result)
                                                                             (str \" $.repl.result \")
                                                                             $.repl.result))
                                                            ($.stream/out $/line)
                                                            ($.stream/flush)
                                                            (let [result $.repl.result]
                                                              (undef $.repl.result)
                                                              ($.repl/start result))))))
                           ($.repl/start nil))))))
     (call self
           (start result)))))


(export start)



(defn stop

  ^{:doc {:description ""}}

  []

  (if (= *address*
         self)
    (def *active?*
         false)
    (call self
          (stop)))
  nil)


(export stop)
