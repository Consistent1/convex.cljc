

(call *registry*
      (cns-update 'convex.run.repl
                  *address*))


(call *registry*
      (register {:doc  {:description ""}
                 :name ""}))




(def $

  ^{:doc {:description ""}}

  (call *registry*
        (cns-resolve 'convex.run)))



(def $.stream

  ^{:doc {:description ""}}

  (call *registry*
        (cns-resolve 'convex.run.stream)))



(def $.term

  ^{:doc {:description ""}}

  (call *registry*
        (cns-resolve 'convex.run.term)))



(def $.trx

  ^{:doc {:description ""}}

  (call *registry*
        (cns-resolve 'convex.run.trx)))



(def self

  *address*)


;;;;;;;;;; Dynamic values


(def *active?*

  ^{:doc {:description ""}}

  false)


;;;;;;;;;; Private values


(def -prompt

  ^{:doc      {:description ""}
    :private? true}

  nil)


;;;;;;;;;; Basic REPL


(def prompt

  ^{:doc {:description ""}}

  (str $.term/bold
       $.term/fg.blue
       "> "
       $.term/reset))



(defn -next

  ^{:doc      {:description ""}
    :private? true}

  [result]

  ($.trx/precat `(($.stream/out ~-prompt)
                  ($.stream/flush)
                  ($.stream/line+)
                  (let [form+       $/*result*
                        n-form      (count form+)
                        result-real (quote ~result)]
                    (if (>= n-form
                            1)
                      ($.catch/safe `($.trx/precat (quote ~(concat `((quote ~result-real))
                                                                   form+
                                                                   '((def $.repl.result
                                                                          $/*result*)
                                                                     (when $.repl/*active?*
                                                                       ($.trx/precat '(($.stream/out $/line)
                                                                                       ($.stream/out! (if (str? $.repl.result)
                                                                                                        (str \" $.repl.result \")
                                                                                                        $.repl.result))
                                                                                       ($.stream/out $/line)
                                                                                       ($.stream/flush)
                                                                                       (let [result $.repl.result]
                                                                                         (undef $.repl.result)
                                                                                         (call $.repl
                                                                                               (-next result))))))))))

                                    '($.trx/precat `(~($.stream/out! (str $/line
                                                                          $.term/bold
                                                                          $.term/fg.red
                                                                          $/*result*
                                                                          $.term/reset
                                                                          $/line))
                                                     (call $.repl                                       
                                                           (-next (quote ~$/*result*))))))
                      (call $.repl
                            (-next (quote ~result))))))))


(export -next)




(defn start

  ^{:doc {:description ""}}


  ([]

   (start nil
          $/*result*))


  ([option+]

   (start option+
          $/*result*))


  ([option+ result]
 
   (if (= *address*
          self)
     (when-not *active?*
       (def *active?*
            true)
       (def -prompt
            (or (:prompt option+)
                prompt))
       ($.trx/precat `(~(when (:intro? option+)
                          ($.stream/out! (str $.term/fg.blue
                                              $.term/bold
                                              "Convex Lisp Runner (REPL mode)"
                                              $.term/reset
                                              $/line
                                              $/line
                                              "Enter transactions and build a new world."
                                              $/line
                                              $/line
                                              "To learn more: "
                                              $.term/bold
                                              "($/help)"
                                              $.term/reset
                                              $/line)))
                       (call $.repl
                             (-next ~result)))))
     (call self
           (start option+
                  result)))))


(export start)



(defn stop

  ^{:doc {:description ""}}

  []

  (if (= *address*
         self)
    (do
      (def *active?*
           false)
      (def -prompt
           nil)
      nil)
    (call self
          (stop)))
  nil)


(export stop)
