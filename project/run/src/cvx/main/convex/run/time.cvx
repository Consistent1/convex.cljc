

(call *registry*
      (cns-update 'convex.run.time
                  *address*))


(call *registry*
      (register {:doc  {:description ""}
                 :name ""}))


;;;;;;;;;;


(def $.trx

  ^{:doc      {:description ""}
    :private? true}

  (call *registry*
        (cns-resolve 'convex.run.trx)))


;;;;;;;;;;


(defn advance

  ^{:doc {:description ["Advances the current timestamp by `millis` milliseconds."
                        "Argument must be > 0."]
          :examples    [{:code "(sreq/advance (* 60 60 1000))"}]
          :signature   [{:params [millis]}]
          :type        :function}}

  [millis]

  (assert (>= millis
              0))
  [:cvm.sreq :time.advance millis])



(defn pop

  ^{:doc {:description ["Restores the last state saved with `state.push`."
                        "Quoted transaction, if given, is executed in the context of the restored state, allowing to pass values from one to the other."]
          :examples    [{:code "(sreq/state.pop)"}]
          :signatures  [{:params []}]
          :type        :function}}


  ([]

   (pop nil))


  ([trx]

   [:cvm.sreq :time.pop `($.trx/set (quote ~(cons trx
                                                  $.trx/*list*)))]))



(defn push

  ^{:doc {:description ["Pushes the current state of the CVM onto a stack."
                        "This state can later be restored using `state.pop`."]
          :examples    [{:code "(sreq/state.push)"}]
          :signature   [{:params []}]
          :type        :function}}

  []

  [:cvm.sreq :time.push])
