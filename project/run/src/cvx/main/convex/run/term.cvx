(call *registry*
      (cns-update 'convex.run.term
                  *address*))


(call *registry*
      (register {:description ["Produce nice terminal output, such as coloring text, by using ANSI escape codes."
                               "Defined values or values returned from functions can be used in a string to produce desired effects."
                               "To learn more about ANSI escape codes, see https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797."]
                 :name        "Terminal library for the Convex Lisp Runner"}))


;;;;;;;;;; Background colors


(def bg.black

  ^{:doc {:description "Background color black."}}

  "\033[40m")



(def bg.blue

  ^{:doc {:description "Background color blue."}}

  "\033[44m")



(def bg.cyan

  ^{:doc {:description "Background color cyan."}}

  "\033[46m")



(def bg.green

  ^{:doc {:description "Background color green."}}

  "\033[42m")



(def bg.magenta

  ^{:doc {:description "Background color magenta."}}

  "\033[45m")



(def bg.white

  ^{:doc {:description "Background color white."}}

  "\033[47m")



(def bg.red

  ^{:doc {:description "Background color red."}}

  "\033[41m")



(def bg.yellow

  ^{:doc {:description "Background color yellow."}}

  "\033[43m")


;;


(defn bg.rgb

  ^{:doc {:description "Computes RGB color escape code for background color."
          :examples    [{:code "($.term/bg.rgb 156 120 201)"}]
          :signature   [{:params [r g b]}]}}

  [r g b]

  (str "\033[48;2;" r ";" g ";" b "m"))


;;;;;;;;;; Foreground colors


(def fg.black

  ^{:doc {:description "Foreground color black."}}

  "\033[30m")



(def fg.blue

  ^{:doc {:description "Foreground color blue."}}

  "\033[34m")




(def fg.cyan

  ^{:doc {:description "Foreground color cyan."}}

  "\033[36m")



(def fg.green

  ^{:doc {:description "Foreground color green."}}

  "\033[32m")



(def fg.magenta

  ^{:doc {:description "Foreground color magenta."}}

  "\033[35m")



(def fg.white

  ^{:doc {:description "Foreground color white."}}

  "\033[37m")



(def fg.red

  ^{:doc {:description "Foreground color red."}}

  "\033[31m")



(def fg.yellow

  ^{:doc {:description "Foreground color yellow."}}

  "\033[33m")


;;


(defn fg.rgb

  ^{:doc {:description "Computes RGB color escape code for foreground color."
          :examples    [{:code "($.term/fg.rgb 156 120 201)"}]
          :signature   [{:params [r g b]}]}}


  [r g b]

  (str "\033[38;2;" r ";" g ";" b "m"))


;;;;;;;;;; Effects


(def bold

  ^{:doc {:description "Bold effect."}}

  "\033[1m")



(def reset

  ^{:doc {:description "Resets all colors and effects."}}

  "\033[0m")



(def reversed

  ^{:doc {:description "Reverses background and foreground colors."}}

  "\033[7m")



(def underline

  ^{:doc {:description "Underlines text."}}

  "\033[4m")


;;;;;;;;;; Moving


(defn col

  ^{:doc {:description "Moves to column `n`."
          :examples    [{:code "($.term/col 42)"}]
          :signature   [{:params [n]}]}}

  [n]

  (str "\033[" n "G"))



(def cursor.save

  ^{:doc {:description ["Escape code for saving current cursor position."
                        "See `cursor.restore`."]}}

  "\033[s")



(def cursor.restore

  ^{:doc {:description ["Escape code for restoring last saved cursor position."
                        "See `cursor.save`."]}}

  "\033[u")



(defn down

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` lines down."
                        "Defaults to one line."]
          :examples    [{:code "($.term/down 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (down 1))


  ([n]

   (str "\033[" n "B")))



(defn down-begin

  ^{:doc {:description ["Comptes escape code for moving the cursor to the beginning of the line and then `n` lines down."
                        "Defaults to one line."]
          :examples    [{:code "($.term/down-begin 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (down-begin 1))


  ([n]

   (str "\033[" n "E")))



(defn left

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` columns left."
                        "Defaults to one column."]
          :examples    [{:code "($.term/left 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (left 1))


  ([n]

   (str "\033[" n "D")))



(defn right

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` columns right."
                        "Defaults to one column."]
          :examples    [{:code "($.term/right 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (right 1))


  ([n]

   (str "\033[" n "C")))



(defn up

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` lines up."
                        "Defaults to one line."]
          :examples    [{:code "($.term/up 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (up 1))


  ([n]

   (str "\033[" n "A")))



(defn up-begin

  ^{:doc {:description ["Comptes escape code for moving the cursor to the beginning of the line and then `n` lines up."
                        "Defaults to one line."]
          :examples    [{:code "($.term/up-begin 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (up-begin 1))


  ([n]

   (str "\033[" n "F")))


;;;;;;;;;; Clearing


(def clear.screen

  ^{:doc {:description "Escape code for clearing the whole screen."}}

  "\033[H\033[2J")
