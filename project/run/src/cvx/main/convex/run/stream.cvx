



(call *registry*
      (cns-update 'convex.run.stream
                  *address*))


(call *registry*
      (register {:doc  {:description ""}
                 :name ""}))



;;;;;;;;;; STDIO streams


(def stdin

  ^{:doc {:description ""}}

  0)



(def stdout

  ^{:doc {:description ""}}

  1)



(def stderr

  ^{:doc {:description ""}}

  2)


;;;;;;;;;; Dynamic values


(def *err*

  ^{:doc {:description ""}}

  stderr)



(def *in*

  ^{:doc {:description ""}}

  stdin)



(def *out*

  ^{:doc {:description ""}}

  stdout)


;;;;;;;;;; Setting dynamic values



(defn set.in

  ^{:doc {:description ""}}

  [stream]

  (if (= *address*
         self)
    (def *in*
         (do
           (assert (long? stream))
           stream))
    (call self
          (set.in stream))))


(export set.in)




(defn set.out

  ^{:doc {:description ""}}

  [stream]

  (if (= *address*
         self)
    (def *out*
         (do
           (assert (long? stream))
           stream))
    (call self
          (set.out stream))))


(export set.out)



(defn set.err

  ^{:doc {:description ""}}

  [stream]

  (if (= *address*
         self)
    (def *err*
         (do
           (assert (long? stream))
           stream))
    (call self
          (set.err stream))))


(export set.err)


;;;;;;;;;; Requests for handling streams


(defn close

  ^{:doc {:description ""}}

  [stream]

  (assert (not (= stream
                  stderr)))
  [:cvm.sreq :stream.close stream])



(defn err!

  ^{:doc {:description ""}}

  [x]

  (out! *err*
        x))


(defn flush

  ^{:doc {:description "Flushes what has been outputted with `out`."}}


  ([]

   (flush *out*))


  ([stream]

   [:cvm.sreq :stream.flush stream]))



(defn in+

  ^{:doc {:description ["Reads a cell form from input."
                        "See `out.bin`."]}}


  ([]

   (in+ *in*))


  ([stream]

   [:cvm.sreq :stream.in+ stream]))



(defn line+

  ^{:doc {:description ["Reads a line from STDIN."
                        "Returns a list of forms."
                        "See `out.ln`."]}}


  ([]

   (line+ *in*))


  ([stream]

   [:cvm.sreq :stream.line+ stream]))



(defn out

  ^{:doc {:description ["Writes the given argument to STDOUT as text."
                        "See `out.flush`."]
          :examples    [{:code "(sreq/out 42)"}]
          :signature   [{:params [x]}]
          :type        :function}}


  ([x]

   (out *out*
        x))


  ([stream x]

   [:cvm.sreq :stream.out stream x]))



(defn out!

  ^{:doc {:description ["Writes the given argument to STDOUT as text."
                        "See `out.flush`."]
          :examples    [{:code "(sreq/out 42)"}]
          :signature   [{:params [x]}]
          :type        :function}}


  ([x]

   (out! *out*
         x))


  ([stream x]

   [:cvm.sreq :stream.out! stream x]))
