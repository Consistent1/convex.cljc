(call *registry*
      (cns-update 'convex.run.stream
                  *address*))


(call *registry*
      (register {:description ["IO utilities for reading and writing streams."
                               "Input streams are able to parse text as cells."
                               "Output streams are able to print cells as text."
                               "This account keeps references to STDIO streams."
                               "The `$.file` library offers utilities for opening file streams."]
                 :name        "Stream library for the Convex Lisp Runner"}))


;;;;;;;;; Private


(defn -stream

  ^{:doc {:description ["Asserts that `stream` is indeed a stream."
                        "Returns its argument or throw an exception."]
          :signature   [{:params [stream]}]}}

  [stream]

  (assert (long? stream))
  stream)


;;;;;;;;;; STDIO streams


(def stderr

  ^{:doc {:description "Stream for STDERR"}}

  2)



(def stdin

  ^{:doc {:description "Stream for STDIN."}}

  0)



(def stdout

  ^{:doc {:description "Stream for STDOUT"}}

  1)


;;;;;;;;;; Default streams


(def *err*

  ^{:doc {:description ["Default error stream, originally set to `stderr`."
                        "See `set.err`."]}}

  stderr)



(def *in*

  ^{:doc {:description ["Default input stream, originally set to `stdin`."
                        "See `set.in`."]}}

  stdin)



(def *out*

  ^{:doc {:description ["Default output stream, originally set to `stdout`."
                        "See `set.out`."]}}

  stdout)


;;;;;;;;;; Setting dynamic values


(defn set.err

  ^{:callable? true
    :doc       {:description "Sets `*err*` to the given `stream`."
                :signature   [{:params [stream]}]}}

  [stream]

  (if (= *address*
         self)
    (def *err*
         (-stream stream))
    (call self
          (set.err stream))))


(defn set.in

  ^{:callable? true
    :doc       {:description "Sets `*in*` to the given `stream`."
                :signature   [{:params [stream]}]}}

  [stream]

  (if (= *address*
         self)
    (def *in*
         (-stream stream))
    (call self
          (set.in stream))))



(defn set.out

  ^{:callable? true
    :doc       {:description "Sets `*out* to the given `stream`."
                :signature   [{:params [stream]}]}}

  [stream]

  (if (= *address*
         self)
    (def *out*
         (-stream stream))
    (call self
          (set.out stream))))


;;;;;;;;;; Requests for handling streams


(defn close

  ^{:doc {:description ["Returns a request for closing the given `stream`."
                        "`stderr` cannot be closed."]
          :examples    [{:code "($.stream/close $.stream/stdout)"}]
          :signature   [{:params [stream]}]}}

  [stream]

  (assert (not (= stream
                  stderr)))
  [:cvm.sreq :stream.close (-stream stream)])



(defn err!

  ^{:doc {:description "Uses `out!` ont `*err*` for printing `x` to the default error stream."
          :examples    [{:code "($.stream/err! {:some :error})"}]
          :signature   [{:params [x]}]}}

  [x]

  (out! *err*
        x))


(defn flush

  ^{:doc {:description ["Returns a request for flushing the given output `stream` and ensuring all outputs are processed."
                        "Flushes `*out*` by default."]
          :examples    [{:code "($.stream/flush)"}]
          :signature   [{:params []}
                        {:params [stream]}]}}


  ([]

   (flush *out*))


  ([stream]

   [:cvm.sreq :stream.flush (-stream stream)]))



(defn in+

  ^{:doc {:description ["Returns a request for reading the given input `stream`."
                        "Reads from `*in*` by default."
                        "Whole input is read and `stream` is automatically closed."
                        "List of read cells becomes available during next transaction under `$/*result*`."]
          :examples    [{:code "($.stream/in+ $.stream/stdin)"}]
          :signature   [{:params []}
                        {:params [stream]}]}}


  ([]

   (in+ *in*))


  ([stream]

   [:cvm.sreq :stream.in+ (-stream stream)]))



(defn line+

  ^{:doc {:description ["Returns a request for reading a line from the given input `stream`."
                        "Reads from `*in*` by default."
                        "Stops when a new line is encountered."
                        "List of read cells becomes available during next transaction under `$/*result*`."]
          :examples    [{:code "($.stream/in* $.stream/stdin)"}]
          :signature   [{:params []}
                        {:params [stream]}]}}


  ([]

   (line+ *in*))


  ([stream]

   [:cvm.sreq :stream.line+ (-stream stream)]))



(defn out

  ^{:doc {:description ["Returns a request for writing `x` to the given output `stream`."
                        "Writes to `*out*` by default."]
          :examples    [{:code "($.stream/out :foo)"}]
          :signature   [{:params [x]}
                        {:params [stream x]}]}}


  ([x]

   (out *out*
        x))


  ([stream x]

   [:cvm.sreq :stream.out (-stream stream) x]))



(defn out!

  ^{:doc {:description "Likes `out` but also outputs a new line and flushes the `stream`."
          :examples    [{:code "($.stream/out! :foo)"}]
          :signature   [{:params [x]}
                        {:params [stream x]}]}}


  ([x]

   (out! *out*
         x))


  ([stream x]

   [:cvm.sreq :stream.out! (-stream stream) x]))
