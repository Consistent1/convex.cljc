(sreq/dep {T     "project/run/src/cvx/main/convex/run/test.cvx"
           xform "project/cvx/lab/lib/xform/src/cvx/main/convex/xform.cvx"})



(eval (first xform))
(eval `(def T
            (deploy (quote ~(cons 'do
                                  (next (next T)))))))


(import convex.xform :as xform)




(T/filter.set :important?)


(T/meta.set (fn [x] (assoc x :important? true)))


(T/state.push)




(sreq/out "\033[H\033[2J")
(sreq/out.flush)


(T/trx '(do
          (def baz 24)
          (< 2 5)))


(def x
     42)


(T/trx '(T/is (< x 4)))

(let [a 4
      b 3]
  (T/trx `(or (< ~a ~b)
                (- ~a ~b))
           {:description "I know, it fails."}))

(def foo 42)

(T/state.pop `(def bar ~foo))


(T/fail-code #{:ASSERT}
             '(T/is (= 1
                       2))
             {:description "Must fail fast."})



(T/print-failed)

(T/exit)
