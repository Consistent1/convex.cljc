;;
;;
;; Example of a very minimalistic smart contract in Convex Lisp where only the creator can modify a value hold by an actor.
;;
;; More information about Convex Lisp: https://convex.world/cvm
;;
;; An actor is an automated account. It does not have any associated key pair, meaning no one has the ability to
;; issue any transaction for it.
;;
;; Code for an actor is provided when deploying it, executed at that moment, and that's it.
;; All actor abilities depend on that moment.
;;
;;


;; `deploy` creates an actor by evaluating the given quoted code in a new account.
;;
;; Address of that account is then returned.
;;
;;
(def my-actor
     (deploy
       '(do


          ;; Value defined in this actor.
          ;;
          ;; In a real application, could be any kind of state.
          ;;
          (def value
               nil)


          ;; We must remember the caller, the account which deployed this actor.
          ;;
          ;; Later, we'll make sure that only that account can change `value`.
          ;;
          (def creator
               *caller*)


          ;; When calling function from another account (such as this actor), code is executed
          ;; in the context of our own account.
          ;;
          ;; We will apply this function just like any common function to show that `value` will
          ;; be define in our own account, which is NOT the intended purpose of this example.
          ;; 
          (defn set-value

            [x]

            (def value
                 x))


          ;; This function is similar to the previous one but does 2 things.
          ;;
          ;; First, it showcases access control. It fails if the `*caller*` (account calling
          ;; that function) is Not equal to `creator`, remembered at initialization.
          ;;
          ;; Second, it showcases state management. Metadata is provided:
          ;;
          ;;   ^{:callable? true}
          ;;
          ;; This means that we can use `call` and by doing so, the function will be executed
          ;; in the context of the actor, not our account:
          ;;
          ;;   (call ACTOR_ADDRESS
          ;;         (set-value 42))
          ;;
          ;; Meaning that `value` will be defined in the environment of the actor, not our own.
          ;;
          ;; This is what we want. Show that an actor can host some arbitrary state and allow
          ;; users or other actors to modify it using "callable" functions.
          ;;
          ;; All smart contracts are implement using one or several actors which host some state
          ;; and enforce rules on how it can be modified.
          ;;
          (defn set-value-in-actor

            ^{:callable? true}

            [x]

            (when-not (= *caller*
                         creator)
              (fail :TRUST
                    "Only creator can change value"))
            (def value
                 x)))))
