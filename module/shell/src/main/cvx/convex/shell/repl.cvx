(call *registry*
      (cns-update 'convex.shell.repl
                  *address*))


(call *registry*
      (register {:description "Starting and stopping the basic REPL provided by the Convex Shell."
                 :name        "Simple Convex REPL"}))


;;;;;;;;;; Importing libraries


(def $

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell)))



(def $.stream

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.stream)))



(def $.term

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.term)))



(def $.trx

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.trx)))


;;;;;;;;;; Private values


(def -self

  ^{:private? true}

  *address*)


;;;;;;;;;; Public values


(def *active?*

  ^{:doc {:description "Set to true if the REPL is currently running."}}

  false)



(def prompt

  ^{:doc {:description "Prompt string used by default."}}

  (str $.term/bold
       $.term/fg.blue
       "> "
       $.term/reset))


;;;;;;;;;; Private values


(def -prompt

  ^{:doc      {:description "Currently used prompt."}
    :private? true}

  nil)


;;;;;;;;;; Internal


(defn -next

  ^{:callable? true
    :doc       {:description ["After `start`, loops Read-Eval-Print until `stop` is called."
                              "Ensures last result produced by the user is available under `$/*result*`."]}
    :private?  true}

  [result]

  ($.trx/precat `(($.stream/out ~-prompt)
                  ($.stream/flush)
                  ($.stream/line+)
                  (let [form+       $/*result*
                        n-form      (count form+)
                        result-real (quote ~result)]
                    (if (>= n-form
                            1)
                      ($.catch/safe `($.trx/precat (quote ~(concat `((quote ~result-real))
                                                                   form+
                                                                   '((def $.repl.result
                                                                          $/*result*)
                                                                     (when $.repl/*active?*
                                                                       ($.trx/precat '(($.stream/out $/line)
                                                                                       ($.stream/out! (if (str? $.repl.result)
                                                                                                        (str \" $.repl.result \")
                                                                                                        $.repl.result))
                                                                                       ($.stream/out $/line)
                                                                                       ($.stream/flush)
                                                                                       (let [result $.repl.result]
                                                                                         (undef $.repl.result)
                                                                                         (call $.repl
                                                                                               (-next result))))))))))

                                    '($.trx/precat `(~($.stream/out! (str $/line
                                                                          $.term/bold
                                                                          $.term/fg.blue
                                                                          "Exception code:"
                                                                          $.term/reset
                                                                          $/line
                                                                          "  "
                                                                          $.term/bold
                                                                          (:code $/*result*)
                                                                          $/line
                                                                          $.term/bold
                                                                          $.term/fg.blue
                                                                          "Message:"
                                                                          $.term/reset
                                                                          $/line
                                                                          "  "
                                                                          (:message $/*result*)
                                                                          $/line
                                                                          $.term/bold
                                                                          $.term/fg.blue
                                                                          "Trace:"
                                                                          $.term/reset
                                                                          (let [trace (:trace $/*result*)]
                                                                            (if (empty? trace)
                                                                              (str $/line
                                                                                   "  None.")
                                                                              (apply str
                                                                                     (reduce (fn [acc entry]
                                                                                               (conj acc
                                                                                                     $/line
                                                                                                     "  "
                                                                                                     entry))
                                                                                             []
                                                                                             trace))))
                                                                          $/line
                                                                          ))
                                                     (call $.repl                                       
                                                           (-next (quote ~$/*result*))))))
                      (call $.repl
                            (-next (quote ~result))))))))


;;;;;;;;;; API


(defn start

  ^{:callable? true
    :doc       {:description ["Starts a REPL on next transaction."
                              "User can then enter transactions and see results."
                              "For stopping, see `stop`."]
                :examples    [{:code "($.repl/start)"}
                              {:code "($.repl/start {:prompt \"my-repl>>> \"})"}]
                :signature   [{:params []}
                              {:params [option+]}]}}


  ([]

   (start nil
          $/*result*))


  ([option+]

   (start option+
          $/*result*))


  ([option+ result]
 
   (if (= *address*
          -self)
     (when-not *active?*
       (def *active?*
            true)
       (def -prompt
            (or (:prompt option+)
                prompt))
       ($.trx/precat `(~(when (:intro? option+)
                          ($.stream/out! (str $.term/fg.blue
                                              $.term/bold
                                              "Convex Shell (REPL mode)"
                                              $.term/reset
                                              $/line
                                              $/line
                                              "Enter transactions and build a new world."
                                              $/line
                                              $/line
                                              "To learn more: "
                                              $.term/bold
                                              "($/help)"
                                              $.term/reset
                                              $/line)))
                       (call $.repl
                             (-next (quote ~result))))))
     (call -self
           (start option+
                  result)))))



(defn stop

  ^{:callable? true
    :doc       {:description "If currently running, stops the REPL on next transaction."
                :examples    [{:code "($.repl/stop)"}]
                :signature   [{:params []}]}}

  []

  (if (= *address*
         -self)
    (do
      (def *active?*
           false)
      (def -prompt
           nil)
      nil)
    (call -self
          (stop)))
  nil)
