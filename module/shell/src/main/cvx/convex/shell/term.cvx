(call *registry*
      (cns-update 'convex.shell.term
                  *address*))


(call *registry*
      (register {:description ["Produce nice terminal output, such as coloring text, by using ANSI escape codes."
                               "All functions return escape codes as strings that can be easily combined with text."
                               "To learn more about ANSI escape codes, see https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797."
                               "Styling can be disabled using `$.term/style.disable` so that outputs are friendlier for files and terminals"
                               "that do not understand those escape codes."
                               "Disabling applies to all functions from this account but those related to moving the cursor."
                               "Hence, it is usually best not using cursor moving functions unless explicitly needed ; spaces and new lines"
                               "go a long way (see `$/line`)."]
                 :name        "Terminal formatting library for the Convex Shell"}))

;;;;;;;;;; Importing libraries


(def $

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell)))



(def $.stream

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.stream)))


;;;;;;;;;; State


(def *style?*

  ^{:doc {:description ["True if text styling with functions from this account is enabled."
                        "False means that functions returning a color will instead return an empty string."]}}

  true)



(defn -style

 ^{:private? true}

 [x]

 (if *style?*
   x
   ""))



(defn -set-styling

  ^{:callable? true
    :private?  true}

  [allow?]

  (if (= *address*
         ~*address*)
    (def *style?*
         allow?)
    (call ~*address*
          (-set-styling allow?))))



(defn style.disable

  ^{:doc {:description ["Disable text styling with utilities from this account by making them"
                        "return an empty string."]}}

  []

  (-set-styling false))



(defn style.enable

  ^{:doc {:description "Enable text styling with functions from this account."}}

  []

  (-set-styling true))


;;;;;;;;;; Background colors


(defn bg.black

  ^{:doc {:description "Background color black."}}

  []

  (-style "\033[40m"))



(defn bg.blue

  ^{:doc {:description "Background color blue."}}

  []

  (-style "\033[44m"))



(defn bg.cyan

  ^{:doc {:description "Background color cyan."}}

  []

  (-style "\033[46m"))



(defn bg.green

  ^{:doc {:description "Background color green."}}

  []

  (-style "\033[42m"))



(defn bg.magenta

  ^{:doc {:description "Background color magenta."}}

  []

  (-style "\033[45m"))


(defn bg.red

  ^{:doc {:description "Background color red."}}

  []

  (-style "\033[41m"))



(defn bg.white

  ^{:doc {:description "Background color white."}}

  []

  (-style "\033[47m"))



(defn bg.yellow

  ^{:doc {:description "Background color yellow."}}

  []

  (-style "\033[43m"))


;;


(defn bg.rgb

  ^{:doc {:description "Computes RGB color escape code for background color."
          :examples    [{:code "($.term/bg.rgb 156 120 201)"}]
          :signature   [{:params [r g b]}]}}

  [r g b]

  (if *style?*
    (str "\033[48;2;" r ";" g ";" b "m")
    ""))


;;;;;;;;;; Foreground colors


(defn fg.black

  ^{:doc {:description "Foreground color black."}}

  []

  (-style "\033[30m"))



(defn fg.blue

  ^{:doc {:description "Foreground color blue."}}

  []

  (-style "\033[34m"))



(defn fg.cyan

  ^{:doc {:description "Foreground color cyan."}}

  []

  (-style "\033[36m"))



(defn fg.green

  ^{:doc {:description "Foreground color green."}}

  []

  (-style "\033[32m"))



(defn fg.magenta

  ^{:doc {:description "Foreground color magenta."}}

  []

  (-style "\033[35m"))



(defn fg.white

  ^{:doc {:description "Foreground color white."}}

  []

  (-style "\033[37m"))



(defn fg.red

  ^{:doc {:description "Foreground color red."}}

  []

  (-style "\033[31m"))



(defn fg.yellow

  ^{:doc {:description "Foreground color yellow."}}

  []

  (-style "\033[33m"))


;;


(defn fg.rgb

  ^{:doc {:description "Computes RGB color escape code for foreground color."
          :examples    [{:code "($.term/fg.rgb 156 120 201)"}]
          :signature   [{:params [r g b]}]}}


  [r g b]

  (if *style?*
    (str "\033[38;2;" r ";" g ";" b "m")
    ""))


;;;;;;;;;; Effects


(defn bold

  ^{:doc {:description "Bold effect."}}

  []

  (-style "\033[1m"))



(defn reset

  ^{:doc {:description "Resets all colors and effects."}}

  []

  (-style "\033[0m"))



(defn reversed

  ^{:doc {:description "Reverses background and foreground colors."}}

  []

  (-style "\033[7m"))



(defn underline

  ^{:doc {:description "Underlines text."}}

  []

  (-style "\033[4m"))


;;;;;;;;;; Moving


(defn col

  ^{:doc {:description "Moves to column `n`."
          :examples    [{:code "($.term/col 42)"}]
          :signature   [{:params [n]}]}}

  [n]

  (str "\033[" n "G"))



(def cursor.save

  ^{:doc {:description ["Escape code for saving current cursor position."
                        "See `cursor.restore`."]}}

  "\033[s")



(def cursor.restore

  ^{:doc {:description ["Escape code for restoring last saved cursor position."
                        "See `cursor.save`."]}}

  "\033[u")



(defn down

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` lines down."
                        "Defaults to one line."]
          :examples    [{:code "($.term/down 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (down 1))


  ([n]

   (str "\033[" n "B")))



(defn down-begin

  ^{:doc {:description ["Comptes escape code for moving the cursor to the beginning of the line and then `n` lines down."
                        "Defaults to one line."]
          :examples    [{:code "($.term/down-begin 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (down-begin 1))


  ([n]

   (str "\033[" n "E")))



(defn left

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` columns left."
                        "Defaults to one column."]
          :examples    [{:code "($.term/left 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (left 1))


  ([n]

   (str "\033[" n "D")))



(defn right

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` columns right."
                        "Defaults to one column."]
          :examples    [{:code "($.term/right 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (right 1))


  ([n]

   (str "\033[" n "C")))



(defn up

  ^{:doc {:description ["Comptes escape code for moving the cursor `n` lines up."
                        "Defaults to one line."]
          :examples    [{:code "($.term/up 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (up 1))


  ([n]

   (str "\033[" n "A")))



(defn up-begin

  ^{:doc {:description ["Comptes escape code for moving the cursor to the beginning of the line and then `n` lines up."
                        "Defaults to one line."]
          :examples    [{:code "($.term/up-begin 4)"}]
          :signature   [{:params []}
                        {:params [n]}]}}


  ([]

   (up-begin 1))


  ([n]

   (str "\033[" n "F")))


;;;;;;;;;; Clearing


(defn clear.screen

  ^{:doc {:description "Escape code for clearing the whole screen."}}

  []

  (-style "\033[H\033[2J"))


;;;;;;;;;;


(defn demo

  ^{:doc {:description "Prints a string to `$.stream/*out*` producing colored output as demo."
          :examples    [{:code "($.stream/!.outln ($.term/demo))"}]
          :signature   [{:params []}]}}
  []

  ($.stream/!.txt.outln
    (str $/line
         (bg.black)
         "BG black"
         (reset)
         $/line
         (bg.blue)
         "BG blue"
         (reset)
         $/line
         (bg.cyan)
         "BG cyan"
         (reset)
         $/line
         (bg.green)
         "BG green"
         (reset)
         $/line
         (bg.magenta)
         "BG magenta"
         (reset)
         $/line
         (bg.red)
         "BG red"
         (reset)
         $/line
         (bg.white)
         (fg.black)
         "BG white"
         (reset)
         $/line
         (bg.yellow)
         "BG yellow"
         (reset)
         $/line
         (bg.rgb 100 200 150)
         "BG RGB 100 200 150"
         (reset)
         $/line
         (fg.black)
         "FG black"
         (reset)
         $/line
         (fg.blue)
         "FG blue"
         (reset)
         $/line
         (fg.cyan)
         "FG cyan"
         (reset)
         $/line
         (fg.green)
         "FG green"
         (reset)
         $/line
         (fg.magenta)
         "FG magenta"
         (reset)
         $/line
         (fg.red)
         "FG red"
         (reset)
         $/line
         (fg.white)
         (fg.black)
         "FG white"
         (reset)
         $/line
         (fg.yellow)
         "FG yellow"
         (reset)
         $/line
         (fg.rgb 100 200 150)
         "FG RGB 100 200 150"
         (reset)
         $/line
         (bold)
         "Bold text"
         $/line
         (fg.blue)
         "Bold makes also colors brighter"
         (reset))))
