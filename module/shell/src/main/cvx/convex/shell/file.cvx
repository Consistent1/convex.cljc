(call *registry*
      (cns-update 'convex.shell.file
                  *address*))


(call *registry*
      (register {:description "Utilities for reading and writing Convex Lisp files."
                 :name        "File IO for the Convex Shell"}))


;;;;;;;;;;


(def $.trx

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.trx)))
           

;;;;;;;;;; Opening streams


(defn !.stream.in

  ^{:doc {:description ["Returns a request for opening an input stream for the Convex Lisp file located under `path`."
                        "Stream is available during next transaction under `$/*result*`."
                        "See the `$.stream` library."]
          :examples    [{:code "($.file/!.stream.in \"./my/file.cvx\")"}]
          :signature   [{:params [path]}]}}

  [path]

  (assert (str? path))
  [:cvm.sreq :file.stream.in path])



(defn !.stream.out

  ^{:doc {:description ["Returns a request for opening an output stream for the Convex Lisp file located under `path`."
                        "Stream is available during next transaction under `$/*result*`."
                        "See the `$.stream` library."]
          :examples    [{:code "($.file/!.stream.out \"./my/file.cvx\")"}]
          :signature   [{:params [path]}]}}


  [path]

  (assert (str? path))
  [:cvm.sreq :file.stream.out path])


;;;;;;;;;; Higher-level utilities built on stream utilities


(defn !.exec

  ^{:doc {:description "Like `read` but the read cells are passed to `$.trx/precat` for executing as transactions."
          :examples    [{:code "($.file/!.exec \"./my/file.cvx\")"}]
          :signature   [{:params [path]}]}}

  [path]

  ($.trx/prepend '($.trx/precat $/*result*))
  (!.read path))



(defn !.read

  ^{:doc {:description ["Returns a request for reading the Convex Lisp file located under `path` in one go."
                        "List of read cells is available during next transaction under `$/*result*`."]
          :examples    [{:code "($.file/!.read \"./my/file.cvx\")"}]
          :signature   [{:params [path]}]}}

  [path]

  ($.trx/precat `(($.file/!.stream.in ~path)
                  ($.stream/!.in+ $/*result*))))



(defn !.write

  ^{:doc {:description "Returns a request for writing `cell` to the Convex Lisp file located under `path`, in one go."
          :examples    [{:code "($.file/!.write \"./my/file.cvx\") {:foo :bar})"}]
          :signature   [{:params [path cell]}]}}

  [path cell]

  ($.trx/precat `(($.file/!.stream.out ~path)
                  (def convex.shell.file.stream
                       $/*result*)
                  ($.stream/!.outln convex.shell.file.stream
                                    (quote ~cell))
                  ($.stream/!.close convex.shell.file.stream)
                  (undef convex.shell.file.stream)
                  nil)))
