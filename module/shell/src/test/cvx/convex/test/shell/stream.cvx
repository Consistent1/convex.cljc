;;
;;
;; Testing `convex.shell.stream`.
;;
;; Actual IO is tested in tests for `convex.shell.file`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.main

  ^{:doc {:description "Main test suite."}}

  []

  (T/group '((T/path.conj 'convex.shell.stream)

             (T/trx '(= :stdin
                        $.stream/stdin)
                    {:description "STDIN is set."})

             (T/trx '(= :stdout
                        $.stream/stdout)
                    {:description "STDOUT is set."})

             (T/trx '(= :stderr
                        $.stream/stderr)
                    {:description "STDERR is set."})

             (T/trx '(= $.stream/*err*
                        $.stream/stderr)
                    {:description "Default error stream defaults to STDERR."})

             (T/trx '(= $.stream/*in*
                        $.stream/stdin)
                    {:description "Default input stream defaults to STDIN."})

             (T/trx '(= $.stream/*out*
                        $.stream/stdout)
                    {:description "Default output stream defaults to STDOUT."})

             (T/fail.code #{:ASSERT}
                          '($.stream/!.close $.stream/stderr)
                          {:description "Cannot close STDERR."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.close 42)
                          {:description "Cannot close inexistent stream."})

             ($.stream/!.close-soft 42)
             (T/trx '(nil? $/*result*)
                    {:description "Soft close does not throw on inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.flush 42)
                          {:description "Cannot flush inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.in+ 42)
                          {:description "Cannot read cells from inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.line 42)
                          {:description "Cannot read line from inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.out 42
                                           :foo)
                          {:description "Cannot write cell to inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.outln 42
                                             :foo)
                          {:description "Cannot write and flush cell to inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.txt.out 42
                                               :foo)
                          {:description "Cannot write cell as text to inexistent stream."})

             (T/fail.code #{:STREAM}
                          '($.stream/!.txt.outln 42
                                                :foo)
                          {:description "Cannot write and flush cell as text to inexistent stream."}))))




;;;


(suite.main)
(T/print "convex.shell.stream")
