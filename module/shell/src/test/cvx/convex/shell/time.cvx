{}


;;;;;;;;;;


(.t.def ..time.advance

  (def x
       false)

  (let [addr *address*]
    (set-key .account.0-key)
    (schedule (inc *timestamp*)
              (def x
                   true))
    (.account.switch .account.genesis)
    (transfer addr
              1000000)
    (.account.switch addr))

  (def ts
       *timestamp*)

  (.t.is (= false
            x))

  (.t.is (= 1
            (.time.advance 1)))

  (.t.is (= (inc ts)
            *timestamp*))

  (.t.is (= true
            x)
         "Scheduled transaction ran")

  (.t.is (.t.ex :ARGUMENT
                (.time.advance "42"))
         "Must be a long")

  (.t.is (.t.ex :ARGUMENT
                (.time.advance -1))
         "Cannot go back in time"))



(.t.def ..time.do*

  (let [[nano+
         result] (.time.do*
                   (def x
                        42)
                   (inc x))]
    (.t.is (< 0
              nano+))
    (.t.is (= 43
              result))))



(.t.def ..time.nano

  (.t.is (long? (.time.nano)))

  (.t.is (< (.time.nano)
            (.time.nano))))



(.t.def ..time.unix

  (.t.is (long? (.time.unix)))

  (.t.is (< (.time.unix)
            (do
              (.time.sleep 1)
              (.time.unix)))))



(.t.def ..time.iso<->unix

  (def iso
       (.time.iso))

  (.t.is (= iso
            (.time.unix->iso (.time.iso->unix iso)))))
