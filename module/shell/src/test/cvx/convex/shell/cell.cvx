{}


;;;;;;;;;;


(.t.def ..cell.compile

  (def code
       '(def foo (inc bar)))

  (.t.is (boolean (.cell.compile #1234567890
                                 code))
         "Inexistent account")

  (.t.is (= (compile code)
            (.cell.compile *address*
                           code))
         "With `*state*`")

  (.t.is (= (compile code)
            (.cell.compile (.state.genesis)
                           *address*
                           code))
         "With custom state")

  (.t.is (.t.ex :ARGUMENT
                (.cell.compile :fail
                               *address*
                               code))
         "Not a state")

  (.t.is (.t.ex :ARGUMENT
                (.cell.compile :fail
                               code))
         "Not a address"))



(.t.def ..cell.size

  (.t.is (= 2
            (.cell.size 1)))

  (.t.is (< (.cell.size 1)
            (.cell.size [1])))

  (.t.is (.t.ex :ARGUMENT
                (.cell.size nil))))



(.t.def ..cell.ref.stat

  (.t.is (.t.ex :ARGUMENT
                (.cell.ref.stat nil)))

  (.t.is (= {:direct    1
             :embedded  1
             :persisted 0
             :soft      0
             :stored    0
             :total     1}
            (.cell.ref.stat 1)))

  (.t.is (= {:direct    5
             :embedded  5
             :persisted 0
             :soft      0
             :stored    0
             :total     5}
            (.cell.ref.stat [1 2 [3]])))

  (def stat
       (.cell.ref.stat *state*))

  (.t.is (< 0
            (:direct stat)))

  (.t.is (< 0
            (:embedded stat)))

  (.t.is (= 0
            (:persisted stat)))

  (.t.is (= 0
            (:soft stat)))

  (.t.is (= 0
            (:stored stat)))

  (.t.is (< 0
            (:total stat))))



(.t.def ..cell.str

  (.t.is (= "\a"
            (.cell.str \a))
         "Char")

  (.t.is (= "\"test\""
            (.cell.str "test"))
         "String")

  (.t.is (.t.ex :READER
                (.reader.form+ (str *state*)))
         "State is not printed in full by defaul")

  (.t.is (= #{:accounts
              :globals
              :peers
              :schedule}
              (set (keys (first (.reader.form+ (.cell.str *state*))))))
         "State can be printed in full")

  (.t.is (.t.ex :READER
                (.reader.form+ (.cell.str 100
                                          *state*)))
         "Apply limit")

  (.t.is (= "nil"
            (.cell.str nil))
         "Nil friendly")

  (.t.is (.t.ex :ARGUMENT
                (.cell.str :fail
                           :test))
         "Limit is not a Long"))
