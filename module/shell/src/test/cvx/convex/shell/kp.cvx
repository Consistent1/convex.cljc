{}


;;;;;;;;;;


(.t.def ..kp.create

  (def kp
       (.kp.create))

  (.t.is (boolean kp))


  (def seed
       (.kp.seed kp))

  (.t.is (= seed
            (.kp.seed (.kp.create seed)))
         "From seed")

  (.t.is (.t.ex :ARGUMENT
                (.kp.create 0x123456))
         "Bad seed"))



(.t.def ..kp.pubkey

  (.t.is (.t.ex :ARGUMENT
                (.kp.pubkey 42))
         "Not a key pair")

  (def kp
       (.kp.create))

  (def pubkey
       (.kp.pubkey kp))

  (.t.is (.account.key? pubkey))

  (.t.is (= pubkey
            (.kp.pubkey (.kp.create (.kp.seed kp))))
         "Recreating the key pair from seed yields the same public key"))



(.t.def ..kp.seed

  (.t.is (.t.ex :ARGUMENT
                (.kp.seed 42))
         "Not a key pair")

  (def seed
       (.kp.seed (.kp.create)))

  (.t.is (and (blob? seed)
              (= 32
                 (count seed)))))



(.t.def ..kp.sign

  (def kp
       (.kp.create))

  (def sign
       (.kp.sign kp
                 42))

  (.t.is (= (.kp.pubkey kp)
            (:public-key sign)))

  (.t.is (blob? (:signature sign)))

  (.t.is (= 42
            (:value sign)))

  (.t.is (.t.ex :ARGUMENT
                (.kp.sign :fail
                          42))
         "Not a key pair"))



(.t.def ..kp.verify

  (def kp
       (.kp.create))

  (def pubkey
       (.kp.pubkey kp))

  (def value
       42)

  (def signed
       (.kp.sign kp
                 value))

  (def signature
       (:signature signed))

  (.t.is (.kp.verify signature
                     pubkey
                     value)
         "Good signature")

  (.t.is (= false
            (.kp.verify (:signature (.kp.sign (.kp.create)
                                              42))
                        pubkey
                        value))
         "Wrong signature")

  (.t.is (= false
            (.kp.verify signature
                        (:key (account .account.genesis))
                        value))
         "Wrong public key")

  (.t.is (= false
            (.kp.verify signature
                        pubkey
                        :fail))
         "Wrong data")

  (.t.is (.t.ex :ARGUMENT
                (.kp.verify 0x0000
                            pubkey
                            42))
         "Bad length for signature")

  (.t.is (.t.ex :ARGUMENT
                (.kp.verify 0x0000
                            :fail
                            42))
         "Bad public key"))
