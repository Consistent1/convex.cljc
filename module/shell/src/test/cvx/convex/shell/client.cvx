{}


;;;;;;;;;; Preparations


(def -client.kp
     (.kp.create))



(def -peer.kp
     -client.kp)



(def -peer.pubkey
     (.kp.pubkey -peer.kp))



(def -state
     (.state.genesis {:pubkey+ [-peer.pubkey]}))



(def -state.hash
     (hash (encoding -state)))



(defn -with-client

  [f]

  (.try.resrc* [peer   (.peer.start (.peer.init -peer.kp
                                                {:state -state}))
                       (.peer.stop peer)
                client (.client.connect)
                       (.client.close client)]
    (f client)))


  
;;;;;;;;;; Tests


(.t.def ..client.connect

  ;; Also tests `.client.close`.

  (-with-client (fn [client]
                  (.t.is (boolean client))))

  (.t.is (.t.ex :ARGUMENT
                (.client.connect {:host :fail}))
         "Bad host")

  (.t.is (.t.ex :ARGUMENT
                (.client.connect {:port :fail}))
         "Bad port")

  (.t.is (.t.ex :SHELL.CLIENT
                (.client.connect {:host "azertyazerty"}))
         "Inexistent host, cannot connect"))



(.t.def ..client.peer.endpoint

  (-with-client (fn [client]
                  (.t.is (= {:host "localhost"
                             :port 18888}
                            (.client.peer.endpoint client))))))



(.t.def ..client.peer.status

  (def status
       (-with-client (fn [client]
                       (.a.take (.client.peer.status client)
                                2000
                                :timeout))))

  (.t.is (blob? (:hash.belief status))
         "Belief hash")

  (.t.is (= -state.hash
            (:hash.state.consensus status))
         "Consensus state hash")

  (.t.is (= -state.hash
            (:hash.state.genesis status))
         "Genesis state hash")

  (.t.is (zero? (:n.block status))
         "Ordering length")

  (.t.is (zero? (:point.consensus status))
         "Consensus point")

  (.t.is (zero? (:point.proposal status))
         "Proposal point")

  (.t.is (= -peer.pubkey
            (:pubkey status))
         "Pubkey"))



(.t.def ..client.query

  (-with-client
    (fn [client]

      (def result
           (.a.take (.client.query client
                                   #2
                                   '(inc 42))
                    4000
                    :timeout))
  
      (.t.is (nil? (:error result)))
      
      (.t.is (long? (:id result)))
      
      (.t.is (nil? (:info result)))
      
      (.t.is (= 43
                (:result result)))
      
      (.t.is (.t.ex :ARGUMENT
                    (.client.query client
                                   :fail
                                   '(inc 42)))
             "Not an address")))
      
  (.t.is (.t.ex :ARGUMENT
                (.client.query :fail
                               #2
                               '(inc 42)))
         "Not a client"))



(.t.def ..client.query.state

  ^:slow?

  (-with-client (fn [client]
                  (.t.is (= #{:accounts
                              :globals
                              :peers
                              :schedule}
                            (set (keys (.a.take (.client.query.state client))))))))

  (.t.is (.t.ex :ARGUMENT
                (.client.query.state :fail))
         "Not a client"))



(.t.def ..client.sequence

  (-with-client
    (fn [client]

      (.t.is (= 1
                (.a.take (.client.sequence client
                                           #0)))
             "Existing account")

      (.t.is (nil? (.a.take (.client.sequence client
                                              #1000000000000)))
             "Inexistent account"))))



(.t.def ..client.transact

  (-with-client
    (fn [client]
      
      (def result
           (.a.take (.client.transact client
                                      -client.kp
                                      (.trx.new.invoke .account.genesis
                                                       '(def foo
                                                             (inc 42))
                                                       {:sequence 1}))
                    4000
                    :timeout))

      (.t.is (nil? (:error result)))

      (.t.is (long? (:id result)))

      (.t.is (nil? (:info result)))

      (.t.is (= 43
                (:result result)))

      (.t.is (= 43
                (:result (.a.take
                           (.client.query client
                                          .account.genesis
                                          'foo)
                           4000
                           :timeout)))
             "Confirm transaction with a query")

      (.t.is (= 44
                (:result (.a.take
                           (.client.transact client
                                             (.kp.sign -client.kp
                                                       (.trx.new.invoke .account.genesis
                                                                        '(def foo
                                                                              (inc foo))
                                                                        {:sequence 2}))))))
             "Pre-signed transaction")

      (.t.is (.t.ex :ARGUMENT
                    (.client.transact client
                                      :fail
                                      (.trx.new.invoke .account.genesis
                                                       '(def foo
                                                             (inc 42))
                                                       {:sequence 3})))
             "Not a key pair")

      (.t.is (.t.ex :ARGUMENT
                    (.client.transact client
                                      -client.kp
                                      :fail))
             "Not a transaction"))))
