{:paths ["bb"]



 :tasks {:requires

         ([helins.maestro     :as maestro]
          [helins.maestro.cmd :as maestro.cmd])


         ;; TASKS

         
         cp

         {:doc      "Prints the class path ; extra profiles given as arguments"
          :requires ([script.cp :as $.cp])
          :task     ($.cp/print)}


         cp:del

         {:doc      "Deletes the cached classpath of the given project"
          :requires ([script.cp :as $.cp])
          :task     ($.cp/delete)}


         dev

         {:doc  "Starts dev mode using '-M' ; project, extra profiles, and extra arguments"
          :task (maestro/clojure (maestro.cmd/dev (maestro/ctx)))}
                                  


         dev:templ

         {:doc      "In project directory where Clojure dev files are located, copies `./templ.clj` (public) to `./dev.clj` (private)"
          :requires ([script.dev :as $.dev])
          :task     ($.dev/templ-copy)}


         dev:templ:del

         {:doc      "In project directory where Clojure dev files are located, deletes `./dev.clj`"
          :requires ([script.dev :as $.dev])
          :task     ($.dev/templ-del)}


         jar

         {:doc      "Packages the given aliases in a jar"
          :requires ([helins.maestro         :as maestro]
                     [helins.maestro.depstar :as maestro.depstar])
          :task     (maestro/clojure (maestro.depstar/jar (maestro/ctx)))}


         lint

         {:doc  "Starts Clj-kondo on './src' (further path can be provided as command-line argument)"
          :task (shell (str "clj-kondo --lint "
                            (first *command-line-args*)))}


         lint:import

         {:doc      "Initializes Clj-kondo and copies configuration files from dependencies"
          :requires ([script.cp :as $.cp])
          :task     (shell (format "clj-kondo --lint '%s' --dependencies --parallel --copy-configs"
                                   ($.cp/string)))}


         run-M

         {:doc  "Executes Clojure using '-M'"
          :task (maestro/clojure (maestro.cmd/main-class (maestro/ctx)))}


         run-X

         {:doc  "Executes Clojure using '-X'"
          :task (maestro/clojure (maestro.cmd/function (maestro/ctx)))}


         test

         {:doc      "Runs tests on the JVM ; given aliases and required ones ; takes aliases and arguments for Kaocha CLI"
          :requires ([helins.maestro.kaocha :as maestro.kaocha])
          :task     (maestro/clojure (-> (maestro/ctx)
                                         (update :maestro/arg+
                                                 (partial cons
                                                          "--config-file kaocha.edn"))
                                         maestro.kaocha/broad))}



         test:narrow

         {:doc      "Runs tests on the JVM ; only specified aliases ; takes aliases and arguments for Kaocha CLI"
          :requires ([helins.maestro.kaocha :as maestro.kaocha])
          :task     (maestro/clojure (-> (maestro/ctx)
                                         (update :maestro/arg+
                                                 (partial cons
                                                          "--config-file kaocha.edn"))
                                         maestro.kaocha/narrow))}


         uberjar

         {:doc      "Packages the tiven aliases in an uberjar"
          :requires ([helins.maestro.depstar :as maestro.depstar])
          :task     (maestro/clojure (maestro.depstar/uberjar (maestro/ctx)))}
         }}
