{:tasks {deploy

         {:depends [jar]
          :doc     "Deploy this project to Clojars"
          :task    (clojure "-X:deploy")}
         


         dev:clojure

         {:doc  "Start Clojure JVM dev environment (NREPL on port 14563)"
          :task (clojure-2 "-M:dev:test:nrepl")}



         dev:cljs

         {:doc  "Start CLJS dev environment (NREPL on port 14563, server on port 8000)"
          :task (clojure-2 "-M:cljs:dev:test watch dev")}



         fuzz:random

         {:doc  "Run base fuzzy tester with random forms, in an infinite loop"
          :task (clojure "-X:fuzz-random")}



         install

         {:depends [jar]
          :doc     "Install jar to local Maven repo"
          :task    (clojure "-X:install")}



         jar

         {:doc  "Build a jar for this project"
          :task (clojure "-X:jar")}



         lint

         {:doc "Start Clj-kondo on './src' (further path can be provided as command-line argument)"
          :task (shell (str "clj-kondo --lint src/"
                                               (first *command-line-args*)))}



         pom

         {:doc  "Sync POM file with deps.edn"
          :task (clojure "-Spom")}



         shadow:clean

         {:doc  "Remove the given profile from Shadow-CLJS cache (for full recompilation)"
          :task (shadow-clean (first *command-line-args*))}



         shadow:clean-test

         {:doc  "Like 'shadow:clean' but for the ':test-node' profile"
          :task (shadow-clean "test-node")}



         test:jvm

         {:doc  "Run tests on the JVM once ; accepts Kaocha CLI arguments"
          :task (test-jvm nil)}


         test:jvm:watch

         {:doc "Run tests on the JVM everytime a file is changed ; accepts Kaocha CLI arguments"
          :task (test-node ["--watch"])}



         test:node

         {:doc  "Run tests on NodeJS after unoptimized compilation"
          :task (test-node false)}



         test:node:optimize

         {:doc  "Run tests on NodeJS after advanced compilation"
          :task (test-node true)}



         :requires ([babashka.fs :as fs])



         :init

         (do
           (defn clojure-2

             ;; Like `clojure` but prepares environment for `test.check` and appends additional CLI arguments.

             [command]

             (let [{:keys [extra+
                           max-size
                           n-test]} (-> *command-line-args*
                                        first
                                        clojure.edn/read-string )]
               (clojure {:extra-env {"BREAK_MAX_SIZE" max-size
                                     "BREAK_N_TEST"   n-test}}
                        (str command
                             " "
                             (clojure.string/join " "
                                                  extra+)))))



           (defn shadow-clean
             
             ;; Deletes a Shadow-CLJS profile.

             [profile]

             (when (empty? profile)
               (println "A Shadow-CLJS profile must be provided")
               (System/exit 42))
             (fs/delete-tree (str ".shadow-cljs/builds/"
                                  profile)))



           (defn test-jvm

             ;; Concats CLI args with the given ones.

             [arg+]

             (clojure (str "-M:kaocha:test -m kaocha.runner --config-file kaocha.edn :jvm "
                           (clojure.string/join " "
                                                (concat arg+
                                                        *command-line-args*)))))



           (defn test-node

             [optimize?]

             (clojure-2 (format "-M:cljs:test %s test-node"
                               (if optimize?
                                 "release"
                                 "compile")))
             (shell "node ./compiled/node/test.js"))


           )}}
