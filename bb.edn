{:deps  {io.helins/maestro         {:mvn/version "0.0.0-alpha0"}
         io.helins/maestro.depstar {:mvn/version "0.0.0-alpha0"}
         io.helins/maestro.kaocha  {:mvn/version "0.0.0-alpha0"}}
 :paths ["script"]



 :tasks {cp

         {:doc      "Pretty prints the class path received as STDIN"
          :requires ([helins.maestro.cp :as maestro.cp])
          :task     (maestro.cp/print-stdin)}


         cp:rm

         {:doc      "Deletes the computed classpath"
          :requires ([helins.maestro.cp :as maestro.cp])
          :task     (maestro.cp/rm)}


         deploy

         {:doc  "Deploy to Clojars ; needs username, filename leading to Clojars token, and project alias"
          :task (clojure {:extra-env {"CLOJARS_USERNAME" (first *command-line-args*)
                                      "CLOJARS_PASSWORD" (slurp (second *command-line-args*))}}
                         (let [dir (.substring (nth *command-line-args*
                                                    2)
                                               1)]
                           (format "-X:task/deploy :artifact '%s' :pom-file '%s'"
                                     (pr-str (format "build/jar/%s.jar"
                                                     dir))
                                     (pr-str (format "%s/pom.xml"
                                                     dir)))))}


         dev

         {:doc      "Starts dev mode (using '-M' by default) ; same arguments as Clojure CLI"
          :requires ([helins.maestro.run :as maestro.run])
          :task     (maestro.run/dev)}


         install

         {:doc  "Install alias to local Maven repo"
          :task (clojure (let [dir (.substring (first *command-line-args*)
                                               1)]
                           (format "-X:task/install :artifact '%s' :pom-file '%s'"
                                   (pr-str (format "build/jar/%s.jar"
                                                   dir))
                                   (pr-str (format "%s/pom.xml"
                                                   dir)))))}


         jar

         {:doc      "Packages the given aliases in a jar ; same arguments as Depstar"
          :requires ([helins.maestro.depstar.run :as maestro.depstar.run])
          :task     (maestro.depstar.run/jar)}


         lint

         {:doc  "Starts Clj-kondo on the path given as argument ; understands globs"
          :task (shell (str "clj-kondo --lint "
                            (first *command-line-args*)))}


         lint:import

         {:doc  "Initializes Clj-kondo and copies configuration files from dependencies ; uses classpath received as STDIN"
          :task (shell (format "clj-kondo --lint '%s' --dependencies --parallel --copy-configs"
                               (slurp *in*)))}


         native:agent

         {:doc      "Starts Java command setting the native-image-agent to output tracing to './private/agent' (eg. reflection configuration for task 'native:image'"
          :requires ([script.native :as $.native])
          :task     ($.native/agent)}


         native:reflect-config

         {:doc      "Copies './private/agent/reflect-config.json' to the folder given as argument after preparing it"
          :requires ([script.native :as $.native])
          :task     ($.native/reflect-config)}


         native:image

         {:doc      "Builds a native image in `./build/native` ; requires path to uberjar"
          :requires ([script.native :as $.native])
          :task     ($.native/image)}


         run-M

         {:doc      "Executes Clojure using '-M', calling the main class specified in the alias"
          :requires ([helins.maestro.run :as maestro.run])
          :task     (maestro.run/main-class)}


         run-X

         {:doc      "Executes Clojure using '-X', using the function specified in the alias"
          :requires ([helins.maestro.run :as maestro.run])
          :task     (maestro.run/function)}


         test

         {:doc      "Runs tests on the JVM for the given aliases ; accepts Kaocha CLI arguments"
          :requires ([helins.maestro.kaocha.run :as maestro.kaocha.run])
          :task     (maestro.kaocha.run/broad)}



         test:narrow

         {:doc      "Like `test` but tests only the given aliases, not transitive ones"
          :requires ([helins.maestro.kaocha.run :as maestro.kaocha.run])
          :task     (maestro.kaocha.run/narrow)}


         uberjar

         {:doc      "Packages the given aliases in an uberjar ; same arguments as Depstart"
          :requires ([helins.maestro.depstar.run :as maestro.depstar.run])
          :task     (maestro.depstar.run/uberjar)}


		 uberjar:direct

		 {:doc      "Like 'uberjar' but does AOT and direct-linking"
          :requires ([helins.maestro.depstar.run :as maestro.depstar.run])
          :task     (binding [*command-line-args* (concat *command-line-args*
                                                          [":aot"      "true"
                                                           ":jvm-opts" "'[\"-Dclojure.compiler.direct-linking=true\"]'"])]
                      (maestro.depstar.run/uberjar))}
		  

         }}
