{:deps
 {local/task {:local/root "module/task"}}


 :pods
 {clj-kondo/clj-kondo {:version "2022.09.08"}}


 ;;;;;;;;;;


 :tasks
 {aliases

  {:doc         "Resolves and prints all required aliases"
   :maestro/doc "Given an alias or a vector of aliases and profiles, prints all necessary
                 aliases, following `:maestro/require` in `deps.edn`.

                     bb aliases :module/cvm
                     bb aliases '[:module/cvm :module/net]'
                
                 A `:maestro/mode` can also be activated (see `deps.edn`):

                     bb aliases :dev '[:module/cvm :module/net]'
                
                 Provide any additional aliases you might need for your dev workflow.
                 For instance, an alias for NREPL locate in your `~/.clojure/deps.edn`."
   :requires    ([protosens.maestro])
   :task        (protosens.maestro/task)}


  build

  {:doc      "Build the given module"
   :requires ([protosens.maestro.plugin.build])
   :task     (protosens.maestro.plugin.build/task :task/build)}



  dev

  {:doc         "Shortcut for starting dev mode"
   :maestro/doc "Same kind of arguments as the `aliases` task but activates the `:dev` mode."
   :requires    ([protosens.maestro])
   :task        (protosens.maestro/clojure "-M"
                                        {:maestro/mode :dev})}


  doc:module

  {:doc         "Generate documentation for modules"
   :maestro/doc "Produce an `API.md` file at the root of relevant modules.
                 
                 It will contain a full description of all namespaces belonging to the module,
                 with vars and usage."
   :requires    ([protosens.maestro.plugin.quickdoc])
   :task        (protosens.maestro.plugin.quickdoc/module+)}


  doc:task

  {:doc         "Print extra information for the given task"
   :maestro/doc "If there is any"
   :requires    ([protosens.maestro.doc])
   :task        (protosens.maestro.doc/print-task)}


  expose
  
  {:doc         "Expose modules as Git libraries"
   :maestro/doc "By generating a custom `deps.edn` file for those having a `:maestro.git.lib/name`
                 in their alias data."
   :requires    ([protosens.maestro.git.lib])
   :task        (protosens.maestro.git.lib/task)}


  lint

  {:doc         "Lint the whole repository"
   :maestro/doc "Using Clj-kondo.
                 See the `lint:prepare` task."
   :requires    ([protosens.maestro.plugin.clj-kondo])
   :task        (protosens.maestro.plugin.clj-kondo/lint)}


  lint:prepare

  {:doc         "Prepare for `lint`"
   :maestro/doc "Must be run prior to the first time `lint` is run and on dependency changes."
   :requires    ([protosens.maestro.plugin.clj-kondo])
   :task        (protosens.maestro.plugin.clj-kondo/prepare)}


   native:agent

   {:doc         "Use `java` with native-image-agent tracing"
    :maestro/doc "Provide the same argument you would provide to `java`
    
                  Analyze runtime behavior and output results to `./private/agent`
                  Will contain things like reflection configuration for the `native:image` task."
    :requires    ([convex.task.native])
    :task        (convex.task.native/agent)}


   native:reflect-config

   {:doc         "Copies reflection configuration"
    :maestro/doc "See the `native:agent` task.
                 
                  Will copy to the directory given as argument after doing some preparation on the configuration file."
    :requires    ([convex.task.native])
    :task        (task.native/reflect-config)}


   native:image

   {:doc         "Build a native image for the given module"
    :maestro/doc "Assumes its uberjar has been built using the `build` task.
                  Uberjar describes the output path in its native image properties."
    :requires    ([convex.task.native])
    :task        (convex.task.native/image)}


   pprint-cp

   {:doc         "Pretty prints the classpath read from STDIN"
    :maestro/doc "Useful for things like:

                    clojure -Spath -A$( bb aliases :module/cvm ) | bb pprint-cp"
    :requires    ([protosens.maestro.classpath])
    :task        (protosens.maestro.classpath/pprint)}


   test

   {:doc      "Like the `dev` task but launches tests"
    :requires ([protosens.maestro])
    :task     (protosens.maestro/clojure "-M"
                                         {:maestro/mode :test})}


   }}
